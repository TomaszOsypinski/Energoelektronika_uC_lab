
Lab03_Ex02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000207c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000048  1ffe8800  0c00207c  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  1ffe8848  0c0020c4  00010848  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000008c0  00000000  00000000  00010848  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c55c  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017e3  00000000  00000000  0001d664  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039d8  00000000  00000000  0001ee47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000023bc  00000000  00000000  00022820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000618e  00000000  00000000  00024bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a10  00000000  00000000  0002ad6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000788  00000000  00000000  0002f77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000003c7  00000000  00000000  0002ff02  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00207c 	.word	0x0c00207c
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000048 	.word	0x00000048
 8000254:	0c00207c 	.word	0x0c00207c
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8848 	.word	0x1ffe8848
 8000264:	00000004 	.word	0x00000004
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08001f25 	.word	0x08001f25
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08001e81 	.word	0x08001e81

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f000 f805 	bl	80002bc <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f001 fd55 	bl	8001d60 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c2:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002c4:	4b16      	ldr	r3, [pc, #88]	; (8000320 <SystemCoreSetup+0x64>)
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <SystemCoreSetup+0x68>)
 80002c8:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002ce:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d2:	4b13      	ldr	r3, [pc, #76]	; (8000320 <SystemCoreSetup+0x64>)
 80002d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002e0:	4a0f      	ldr	r2, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e2:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <SystemCoreSetup+0x64>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f023 0308 	bic.w	r3, r3, #8
 80002ea:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <SystemCoreSetup+0x6c>)
 80002ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002f2:	3314      	adds	r3, #20
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f023 030f 	bic.w	r3, r3, #15
 80002fe:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000308:	4b07      	ldr	r3, [pc, #28]	; (8000328 <SystemCoreSetup+0x6c>)
 800030a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800030e:	3314      	adds	r3, #20
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	601a      	str	r2, [r3, #0]
}
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	08000000 	.word	0x08000000
 8000328:	58001000 	.word	0x58001000

0800032c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d03e      	beq.n	80003bc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800034a:	4b2b      	ldr	r3, [pc, #172]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e002      	b.n	8000356 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000350:	f001 fcfc 	bl	8001d4c <OSCHP_GetFrequency>
 8000354:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000356:	4b27      	ldr	r3, [pc, #156]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	2b00      	cmp	r3, #0
 8000360:	d020      	beq.n	80003a4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000362:	4b24      	ldr	r3, [pc, #144]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800036a:	0e1b      	lsrs	r3, r3, #24
 800036c:	3301      	adds	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000370:	4b20      	ldr	r3, [pc, #128]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800037e:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	3301      	adds	r3, #1
 800038a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	683a      	ldr	r2, [r7, #0]
 8000390:	fb02 f303 	mul.w	r3, r2, r3
 8000394:	68fa      	ldr	r2, [r7, #12]
 8000396:	fbb2 f3f3 	udiv	r3, r2, r3
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	e00d      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <SystemCoreClockUpdate+0xc8>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003ac:	3301      	adds	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	e001      	b.n	80003c0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <SystemCoreClockUpdate+0xcc>)
 80003be:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003c0:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	3301      	adds	r3, #1
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ce:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <SystemCoreClockUpdate+0xc4>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f003 0301 	and.w	r3, r3, #1
 80003d8:	3301      	adds	r3, #1
 80003da:	68fa      	ldr	r2, [r7, #12]
 80003dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003e2:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SystemCoreClockUpdate+0xd0>)
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	50004600 	.word	0x50004600
 80003f4:	50004710 	.word	0x50004710
 80003f8:	016e3600 	.word	0x016e3600
 80003fc:	2003ffc0 	.word	0x2003ffc0

08000400 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	460b      	mov	r3, r1
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800040e:	7afb      	ldrb	r3, [r7, #11]
 8000410:	089b      	lsrs	r3, r3, #2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	4618      	mov	r0, r3
 8000416:	7afb      	ldrb	r3, [r7, #11]
 8000418:	089b      	lsrs	r3, r3, #2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	3204      	adds	r2, #4
 8000422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	f003 0303 	and.w	r3, r3, #3
 800042c:	00db      	lsls	r3, r3, #3
 800042e:	4619      	mov	r1, r3
 8000430:	23f8      	movs	r3, #248	; 0xf8
 8000432:	408b      	lsls	r3, r1
 8000434:	43db      	mvns	r3, r3
 8000436:	ea02 0103 	and.w	r1, r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	1d02      	adds	r2, r0, #4
 800043e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000446:	7afb      	ldrb	r3, [r7, #11]
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4619      	mov	r1, r3
 800044c:	2303      	movs	r3, #3
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	401a      	ands	r2, r3
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4a37      	ldr	r2, [pc, #220]	; (8000538 <XMC_GPIO_Init+0x138>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d003      	beq.n	8000468 <XMC_GPIO_Init+0x68>
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4a36      	ldr	r2, [pc, #216]	; (800053c <XMC_GPIO_Init+0x13c>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d10a      	bne.n	800047e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800046c:	7afb      	ldrb	r3, [r7, #11]
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f303 	lsl.w	r3, r1, r3
 8000474:	43db      	mvns	r3, r3
 8000476:	401a      	ands	r2, r3
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	661a      	str	r2, [r3, #96]	; 0x60
 800047c:	e03c      	b.n	80004f8 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	7afb      	ldrb	r3, [r7, #11]
 8000484:	409a      	lsls	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800048a:	7afb      	ldrb	r3, [r7, #11]
 800048c:	08db      	lsrs	r3, r3, #3
 800048e:	b2db      	uxtb	r3, r3
 8000490:	4618      	mov	r0, r3
 8000492:	7afb      	ldrb	r3, [r7, #11]
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	b2db      	uxtb	r3, r3
 8000498:	461a      	mov	r2, r3
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3210      	adds	r2, #16
 800049e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a2:	7afb      	ldrb	r3, [r7, #11]
 80004a4:	f003 0307 	and.w	r3, r3, #7
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	4619      	mov	r1, r3
 80004ac:	2307      	movs	r3, #7
 80004ae:	408b      	lsls	r3, r1
 80004b0:	43db      	mvns	r3, r3
 80004b2:	ea02 0103 	and.w	r1, r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	f100 0210 	add.w	r2, r0, #16
 80004bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004c0:	7afb      	ldrb	r3, [r7, #11]
 80004c2:	08db      	lsrs	r3, r3, #3
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	4618      	mov	r0, r3
 80004c8:	7afb      	ldrb	r3, [r7, #11]
 80004ca:	08db      	lsrs	r3, r3, #3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	3210      	adds	r2, #16
 80004d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	7a1b      	ldrb	r3, [r3, #8]
 80004dc:	4619      	mov	r1, r3
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	f003 0307 	and.w	r3, r3, #7
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	ea42 0103 	orr.w	r1, r2, r3
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	f100 0210 	add.w	r2, r0, #16
 80004f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004f8:	7afb      	ldrb	r3, [r7, #11]
 80004fa:	089b      	lsrs	r3, r3, #2
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	7afb      	ldrb	r3, [r7, #11]
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3204      	adds	r2, #4
 800050c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	f003 0303 	and.w	r3, r3, #3
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	fa01 f303 	lsl.w	r3, r1, r3
 8000522:	ea42 0103 	orr.w	r1, r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	1d02      	adds	r2, r0, #4
 800052a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	48028e00 	.word	0x48028e00
 800053c:	48028f00 	.word	0x48028f00

08000540 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <XMC_SCU_GetMirrorStatus+0x14>)
 8000546:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800054a:	4618      	mov	r0, r3
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	50004000 	.word	0x50004000

08000558 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000560:	f7ff fee4 	bl	800032c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <XMC_SCU_lDelay+0x3c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <XMC_SCU_lDelay+0x40>)
 800056a:	fba2 2303 	umull	r2, r3, r2, r3
 800056e:	0c9a      	lsrs	r2, r3, #18
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	e003      	b.n	8000586 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800057e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fa      	ldr	r2, [r7, #12]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	d3f7      	bcc.n	800057e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2003ffc0 	.word	0x2003ffc0
 8000598:	431bde83 	.word	0x431bde83

0800059c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f88b 	bl	80006c0 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80005aa:	f000 fa39 	bl	8000a20 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	79db      	ldrb	r3, [r3, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00a      	beq.n	80005cc <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005b6:	f000 fa71 	bl	8000a9c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005ba:	bf00      	nop
 80005bc:	f000 fa5c 	bl	8000a78 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005c0:	4603      	mov	r3, r0
 80005c2:	f083 0301 	eor.w	r3, r3, #1
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f7      	bne.n	80005bc <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	7a5b      	ldrb	r3, [r3, #9]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f8ef 	bl	80007b4 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005d6:	bf00      	nop
 80005d8:	f7ff ffb2 	bl	8000540 <XMC_SCU_GetMirrorStatus>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1fa      	bne.n	80005d8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7a1b      	ldrb	r3, [r3, #8]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f9f4 	bl	80009d4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7c1b      	ldrb	r3, [r3, #16]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f8fd 	bl	80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	7c5b      	ldrb	r3, [r3, #17]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f920 	bl	8000840 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7c9b      	ldrb	r3, [r3, #18]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f907 	bl	8000818 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	7cdb      	ldrb	r3, [r3, #19]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f92a 	bl	8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	799b      	ldrb	r3, [r3, #6]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00a      	beq.n	8000632 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800061c:	f000 fa72 	bl	8000b04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000620:	bf00      	nop
 8000622:	f000 fa97 	bl	8000b54 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8000626:	4603      	mov	r3, r0
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1f7      	bne.n	8000622 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 800063a:	f000 faaf 	bl	8000b9c <XMC_SCU_CLOCK_DisableSystemPll>
 800063e:	e014      	b.n	800066a <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000640:	f000 fa9c 	bl	8000b7c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	8899      	ldrh	r1, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000650:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000656:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	4608      	mov	r0, r1
 8000660:	4611      	mov	r1, r2
 8000662:	462a      	mov	r2, r5
 8000664:	4623      	mov	r3, r4
 8000666:	f000 faa9 	bl	8000bbc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000672:	d103      	bne.n	800067c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000674:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000678:	f000 f822 	bl	80006c0 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800067c:	f7ff fe56 	bl	800032c <SystemCoreClockUpdate>
}
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bdb0      	pop	{r4, r5, r7, pc}
 8000686:	bf00      	nop

08000688 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0f1b      	lsrs	r3, r3, #28
 8000694:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800069c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	4613      	mov	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006ac:	4413      	add	r3, r2
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	601a      	str	r2, [r3, #0]
}
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	50004414 	.word	0x50004414

080006c0 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006c8:	4906      	ldr	r1, [pc, #24]	; (80006e4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	50004600 	.word	0x50004600

080006e8 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006f0:	4906      	ldr	r1, [pc, #24]	; (800070c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	50004600 	.word	0x50004600

08000710 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000718:	4906      	ldr	r1, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4313      	orrs	r3, r2
 8000726:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	50004600 	.word	0x50004600

08000738 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d108      	bne.n	800075a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000752:	f023 0301 	bic.w	r3, r3, #1
 8000756:	60d3      	str	r3, [r2, #12]
 8000758:	e007      	b.n	800076a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	60d3      	str	r3, [r2, #12]
  }
}
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	50004710 	.word	0x50004710

08000778 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000782:	bf00      	nop
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000786:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f8      	bne.n	8000784 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000792:	4907      	ldr	r1, [pc, #28]	; (80007b0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800079c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800079e:	4313      	orrs	r3, r2
 80007a0:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	50004000 	.word	0x50004000
 80007b0:	50004300 	.word	0x50004300

080007b4 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007be:	bf00      	nop
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f8      	bne.n	80007c0 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007ce:	4907      	ldr	r1, [pc, #28]	; (80007ec <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007d8:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007da:	4313      	orrs	r3, r2
 80007dc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	50004000 	.word	0x50004000
 80007ec:	50004300 	.word	0x50004300

080007f0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007f8:	4906      	ldr	r1, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000806:	4313      	orrs	r3, r2
 8000808:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	50004600 	.word	0x50004600

08000818 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800082e:	4313      	orrs	r3, r2
 8000830:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	50004600 	.word	0x50004600

08000840 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000848:	4906      	ldr	r1, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000856:	4313      	orrs	r3, r2
 8000858:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	50004600 	.word	0x50004600

08000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000870:	4906      	ldr	r1, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800087e:	4313      	orrs	r3, r2
 8000880:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	50004600 	.word	0x50004600

08000890 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008a6:	4313      	orrs	r3, r2
 80008a8:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	50004600 	.word	0x50004600

080008b8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008c0:	4906      	ldr	r1, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80008ce:	4313      	orrs	r3, r2
 80008d0:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	50004600 	.word	0x50004600

080008e0 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008e8:	4906      	ldr	r1, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008f6:	4313      	orrs	r3, r2
 80008f8:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	50004600 	.word	0x50004600

08000908 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	6053      	str	r3, [r2, #4]
}
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	50004600 	.word	0x50004600

08000928 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	0f1b      	lsrs	r3, r3, #28
 8000934:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800093c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	4613      	mov	r3, r2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	461a      	mov	r2, r3
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 800094c:	4413      	add	r3, r2
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	50004648 	.word	0x50004648

08000960 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800096a:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	f043 0310 	orr.w	r3, r3, #16
 8000980:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000982:	4913      	ldr	r1, [pc, #76]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	3b01      	subs	r3, #1
 800098e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000990:	4313      	orrs	r3, r2
 8000992:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f023 0310 	bic.w	r3, r3, #16
 80009aa:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009ac:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009b8:	bf00      	nop
 80009ba:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d0f9      	beq.n	80009ba <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	50004710 	.word	0x50004710

080009d4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009e8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d10e      	bne.n	8000a0e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009fa:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f7ff fdab 	bl	8000558 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a0c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a0e:	2064      	movs	r0, #100	; 0x64
 8000a10:	f7ff fda2 	bl	8000558 <XMC_SCU_lDelay>
}
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	50004710 	.word	0x50004710

08000a20 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a36:	bf00      	nop
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d0f9      	beq.n	8000a38 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00a      	beq.n	8000a66 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a56:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a58:	bf00      	nop
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f9      	bne.n	8000a5a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	50004200 	.word	0x50004200
 8000a74:	50004400 	.word	0x50004400

08000a78 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	50004300 	.word	0x50004300

08000a9c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000aa0:	bf00      	nop
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000aa4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f8      	bne.n	8000aa2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000aba:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000abc:	bf00      	nop
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000ac0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f8      	bne.n	8000abe <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000ad8:	bf00      	nop
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000adc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d1f8      	bne.n	8000ada <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000aee:	bf00      	nop
 8000af0:	f7ff fd26 	bl	8000540 <XMC_SCU_GetMirrorStatus>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1fa      	bne.n	8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	50004000 	.word	0x50004000
 8000b00:	50004300 	.word	0x50004300

08000b04 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b08:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b12:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b14:	4d0d      	ldr	r5, [pc, #52]	; (8000b4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b1e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b22:	f001 f913 	bl	8001d4c <OSCHP_GetFrequency>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b2e:	0d1b      	lsrs	r3, r3, #20
 8000b30:	3b01      	subs	r3, #1
 8000b32:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b34:	4323      	orrs	r3, r4
 8000b36:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b3a:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b42:	6053      	str	r3, [r2, #4]
}
 8000b44:	bdb0      	pop	{r4, r5, r7, pc}
 8000b46:	bf00      	nop
 8000b48:	50004710 	.word	0x50004710
 8000b4c:	50004700 	.word	0x50004700
 8000b50:	6b5fca6b 	.word	0x6b5fca6b

08000b54 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b60:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	50004710 	.word	0x50004710

08000b7c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b80:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8a:	f023 0302 	bic.w	r3, r3, #2
 8000b8e:	6053      	str	r3, [r2, #4]
}
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	50004710 	.word	0x50004710

08000b9c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000ba0:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6053      	str	r3, [r2, #4]
}
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	50004710 	.word	0x50004710

08000bbc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60ba      	str	r2, [r7, #8]
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	81fb      	strh	r3, [r7, #14]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fdb1 	bl	8000738 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bd6:	7b7b      	ldrb	r3, [r7, #13]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 8084 	bne.w	8000ce6 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d109      	bne.n	8000bf8 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000be4:	f001 f8b2 	bl	8001d4c <OSCHP_GetFrequency>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000bec:	fba3 2302 	umull	r2, r3, r3, r2
 8000bf0:	0c9b      	lsrs	r3, r3, #18
 8000bf2:	059b      	lsls	r3, r3, #22
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e002      	b.n	8000bfe <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000bf8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000bfc:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	fb02 f203 	mul.w	r2, r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	4a42      	ldr	r2, [pc, #264]	; (8000d1c <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	0d9b      	lsrs	r3, r3, #22
 8000c1a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c1c:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c28:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c34:	493a      	ldr	r1, [pc, #232]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000c3c:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	3a01      	subs	r2, #1
 8000c42:	0212      	lsls	r2, r2, #8
 8000c44:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c4c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c54:	4313      	orrs	r3, r2
 8000c56:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c62:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f023 0310 	bic.w	r3, r3, #16
 8000c6e:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c70:	4a2b      	ldr	r2, [pc, #172]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c7c:	bf00      	nop
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c8a:	4a25      	ldr	r2, [pc, #148]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f023 0301 	bic.w	r3, r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c96:	bf00      	nop
 8000c98:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f9      	bne.n	8000c98 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	095b      	lsrs	r3, r3, #5
 8000cae:	0d9b      	lsrs	r3, r3, #22
 8000cb0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cb2:	6a3a      	ldr	r2, [r7, #32]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d202      	bcs.n	8000cc0 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cba:	6938      	ldr	r0, [r7, #16]
 8000cbc:	f000 f838 	bl	8000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	0d9b      	lsrs	r3, r3, #22
 8000cce:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cd0:	6a3a      	ldr	r2, [r7, #32]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d202      	bcs.n	8000cde <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000cd8:	6938      	ldr	r0, [r7, #16]
 8000cda:	f000 f829 	bl	8000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000cde:	6a38      	ldr	r0, [r7, #32]
 8000ce0:	f000 f826 	bl	8000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000ce4:	e015      	b.n	8000d12 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d04:	bf00      	nop
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d0f9      	beq.n	8000d06 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	431bde83 	.word	0x431bde83
 8000d1c:	aaaaaaab 	.word	0xaaaaaaab
 8000d20:	50004710 	.word	0x50004710
 8000d24:	f08080ff 	.word	0xf08080ff
 8000d28:	88888889 	.word	0x88888889
 8000d2c:	b60b60b7 	.word	0xb60b60b7

08000d30 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d4c:	2032      	movs	r0, #50	; 0x32
 8000d4e:	f7ff fc03 	bl	8000558 <XMC_SCU_lDelay>
}
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	50004710 	.word	0x50004710

08000d5c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	60da      	str	r2, [r3, #12]
}
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	611a      	str	r2, [r3, #16]
}
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a09      	ldr	r2, [pc, #36]	; (8000dc4 <XMC_CCU8_lDeassertReset+0x30>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d103      	bne.n	8000dac <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000da4:	2080      	movs	r0, #128	; 0x80
 8000da6:	f7ff fc6f 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000daa:	e007      	b.n	8000dbc <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <XMC_CCU8_lDeassertReset+0x34>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d103      	bne.n	8000dbc <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000db4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000db8:	f7ff fc66 	bl	8000688 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40024000 	.word	0x40024000

08000dcc <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a09      	ldr	r2, [pc, #36]	; (8000dfc <XMC_CCU8_lUngateClock+0x30>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d103      	bne.n	8000de4 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8000ddc:	2080      	movs	r0, #128	; 0x80
 8000dde:	f7ff fda3 	bl	8000928 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000de2:	e007      	b.n	8000df4 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <XMC_CCU8_lUngateClock+0x34>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d103      	bne.n	8000df4 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8000dec:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000df0:	f7ff fd9a 	bl	8000928 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40024000 	.word	0x40024000

08000e04 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000e0c:	2010      	movs	r0, #16
 8000e0e:	f7ff fd7b 	bl	8000908 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ffda 	bl	8000dcc <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ffbb 	bl	8000d94 <XMC_CCU8_lDeassertReset>
#endif
}
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ffe7 	bl	8000e04 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff90 	bl	8000d5c <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e48:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	039b      	lsls	r3, r3, #14
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	601a      	str	r2, [r3, #0]
}
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff86 	bl	8000d7c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	7b5b      	ldrb	r3, [r3, #13]
 8000e7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	051a      	lsls	r2, r3, #20
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	7b1b      	ldrb	r3, [r3, #12]
 8000e8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	7b1b      	ldrb	r3, [r3, #12]
 8000e9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	7b5b      	ldrb	r3, [r3, #13]
 8000eac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	f083 0214 	eor.w	r2, r3, #20
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop

08000ed4 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	601a      	str	r2, [r3, #0]
}
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f023 0303 	bic.w	r3, r3, #3
 8000f28:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8000f3e:	78bb      	ldrb	r3, [r7, #2]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d104      	bne.n	8000f4e <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e003      	b.n	8000f56 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	615a      	str	r2, [r3, #20]
}
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
 8000f74:	4613      	mov	r3, r2
 8000f76:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f023 030c 	bic.w	r3, r3, #12
 8000f84:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 8000f86:	78fb      	ldrb	r3, [r7, #3]
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fa2:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8000fa4:	78bb      	ldrb	r3, [r7, #2]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	615a      	str	r2, [r3, #20]
}
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fd8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	031b      	lsls	r3, r3, #12
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	605a      	str	r2, [r3, #4]
}
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800100c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	01db      	lsls	r3, r3, #7
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	4313      	orrs	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	615a      	str	r2, [r3, #20]
}
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4603      	mov	r3, r0
 8001038:	70fb      	strb	r3, [r7, #3]
 800103a:	460b      	mov	r3, r1
 800103c:	70bb      	strb	r3, [r7, #2]
 800103e:	4613      	mov	r3, r2
 8001040:	707b      	strb	r3, [r7, #1]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800104e:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	049b      	lsls	r3, r3, #18
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d104      	bne.n	8001076 <XMC_CCU8_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e003      	b.n	800107e <XMC_CCU8_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800107c:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 800107e:	7e3b      	ldrb	r3, [r7, #24]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <XMC_CCU8_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e003      	b.n	8001096 <XMC_CCU8_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001094:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 800109c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 800109e:	787b      	ldrb	r3, [r7, #1]
 80010a0:	06db      	lsls	r3, r3, #27
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	615a      	str	r2, [r3, #20]
}
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	039b      	lsls	r3, r3, #14
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	605a      	str	r2, [r3, #4]
}
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001104:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
}
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001138:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	029b      	lsls	r3, r3, #10
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	605a      	str	r2, [r3, #4]
}
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001168:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001170:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	605a      	str	r2, [r3, #4]
}
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
 8001190:	4613      	mov	r3, r2
 8001192:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68ba      	ldr	r2, [r7, #8]
 80011ae:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 80011b6:	78bb      	ldrb	r3, [r7, #2]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e003      	b.n	80011ce <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 80011ce:	78fb      	ldrb	r3, [r7, #3]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d104      	bne.n	80011de <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	e003      	b.n	80011e6 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011e4:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	615a      	str	r2, [r3, #20]
}
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001210:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	049b      	lsls	r3, r3, #18
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4313      	orrs	r3, r2
 800121c:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001224:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	785b      	ldrb	r3, [r3, #1]
 800122a:	051b      	lsls	r3, r3, #20
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4313      	orrs	r3, r2
 8001230:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001238:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	789b      	ldrb	r3, [r3, #2]
 800123e:	05db      	lsls	r3, r3, #23
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4313      	orrs	r3, r2
 8001244:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800124c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	789b      	ldrb	r3, [r3, #2]
 8001252:	061b      	lsls	r3, r3, #24
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8001260:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	06db      	lsls	r3, r3, #27
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4313      	orrs	r3, r2
 800126c:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001274:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	78db      	ldrb	r3, [r3, #3]
 800127a:	075b      	lsls	r3, r3, #29
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	4313      	orrs	r3, r2
 8001280:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001288:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	4313      	orrs	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800129c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	601a      	str	r2, [r3, #0]
#endif
}
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	460b      	mov	r3, r1
 80012c6:	607a      	str	r2, [r7, #4]
 80012c8:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	3310      	adds	r3, #16
 80012de:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	461a      	mov	r2, r3
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8001302:	7ffb      	ldrb	r3, [r7, #31]
 8001304:	3316      	adds	r3, #22
 8001306:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2201      	movs	r2, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	789b      	ldrb	r3, [r3, #2]
 800131c:	461a      	mov	r2, r3
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3319      	adds	r3, #25
 8001332:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	78db      	ldrb	r3, [r3, #3]
 8001348:	461a      	mov	r2, r3
 800134a:	7dfb      	ldrb	r3, [r7, #23]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]
#endif
}
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80013c2:	883a      	ldrh	r2, [r7, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80013c8:	e002      	b.n	80013d0 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80013ca:	883a      	ldrh	r2, [r7, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop

080013dc <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
 80013e8:	4613      	mov	r3, r2
 80013ea:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013f2:	60fb      	str	r3, [r7, #12]

  switch(event)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d831      	bhi.n	800145e <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001429 	.word	0x08001429
 8001404:	08001429 	.word	0x08001429
 8001408:	08001433 	.word	0x08001433
 800140c:	08001433 	.word	0x08001433
 8001410:	0800143d 	.word	0x0800143d
 8001414:	0800143d 	.word	0x0800143d
 8001418:	0800145f 	.word	0x0800145f
 800141c:	0800145f 	.word	0x0800145f
 8001420:	08001447 	.word	0x08001447
 8001424:	08001453 	.word	0x08001453
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8001428:	2303      	movs	r3, #3
 800142a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
      break;
 8001430:	e01b      	b.n	800146a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8001432:	230c      	movs	r3, #12
 8001434:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8001436:	2302      	movs	r3, #2
 8001438:	613b      	str	r3, [r7, #16]
      break;
 800143a:	e016      	b.n	800146a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 800143c:	2330      	movs	r3, #48	; 0x30
 800143e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8001440:	2304      	movs	r3, #4
 8001442:	613b      	str	r3, [r7, #16]
      break;
 8001444:	e011      	b.n	800146a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8001446:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 800144c:	2308      	movs	r3, #8
 800144e:	613b      	str	r3, [r7, #16]
      break;
 8001450:	e00b      	b.n	800146a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8001452:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001456:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8001458:	230a      	movs	r3, #10
 800145a:	613b      	str	r3, [r7, #16]
      break;
 800145c:	e005      	b.n	800146a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 800145e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001462:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8001464:	230c      	movs	r3, #12
 8001466:	613b      	str	r3, [r7, #16]
      break;
 8001468:	bf00      	nop
  }
  
  srs &= ~mask;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	43db      	mvns	r3, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001474:	78ba      	ldrb	r2, [r7, #2]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	4613      	mov	r3, r2
 80014ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	2303      	movs	r3, #3
 80014dc:	408b      	lsls	r3, r1
 80014de:	43db      	mvns	r3, r3
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80014ea:	78bb      	ldrb	r3, [r7, #2]
 80014ec:	78f9      	ldrb	r1, [r7, #3]
 80014ee:	0049      	lsls	r1, r1, #1
 80014f0:	408b      	lsls	r3, r1
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop

08001504 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68da      	ldr	r2, [r3, #12]
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	60da      	str	r2, [r3, #12]
}
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	045b      	lsls	r3, r3, #17
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	615a      	str	r2, [r3, #20]
}
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	60da      	str	r2, [r3, #12]
}
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <XMC_CCU8_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return((uint16_t) slice->PR);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	b29b      	uxth	r3, r3
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop

08001590 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	611a      	str	r2, [r3, #16]
}
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop

080015ac <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	2101      	movs	r1, #1
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ea:	f023 020c 	bic.w	r2, r3, #12
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	f003 0306 	and.w	r3, r3, #6
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 8001614:	2301      	movs	r3, #1
 8001616:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7f1b      	ldrb	r3, [r3, #28]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 80a4 	bne.w	800176a <PWM_CCU8_Init+0x162>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fb3e 	bl	8001cac <GLOBAL_CCU8_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	2b00      	cmp	r3, #0
 8001638:	f040 8093 	bne.w	8001762 <PWM_CCU8_Init+0x15a>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fc09 	bl	8000e60 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	885b      	ldrh	r3, [r3, #2]
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fe98 	bl	8001390 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001668:	889b      	ldrh	r3, [r3, #4]
 800166a:	4610      	mov	r0, r2
 800166c:	2100      	movs	r1, #0
 800166e:	461a      	mov	r2, r3
 8001670:	f7ff fe9c 	bl	80013ac <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 800167c:	88db      	ldrh	r3, [r3, #6]
 800167e:	4610      	mov	r0, r2
 8001680:	2101      	movs	r1, #1
 8001682:	461a      	mov	r2, r3
 8001684:	f7ff fe92 	bl	80013ac <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	78db      	ldrb	r3, [r3, #3]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d108      	bne.n	80016ac <PWM_CCU8_Init+0xa4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	78db      	ldrb	r3, [r3, #3]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <PWM_CCU8_Init+0xb6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fc0b 	bl	8000ed4 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff ff83 	bl	80015d8 <XMC_CCU8_SLICE_SetShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff ff57 	bl	8001590 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff ff4f 	bl	8001590 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fec8 	bl	8001494 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f959 	bl	80019bc <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f834 	bl	8001778 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f8f5 	bl	8001900 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	7b1b      	ldrb	r3, [r3, #12]
 800172a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800172e:	b2db      	uxtb	r3, r3
 8001730:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
 8001748:	2300      	movs	r3, #0
 800174a:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <PWM_CCU8_Init+0x166>
      {
        status = PWM_CCU8_Start(handle_ptr);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fa20 	bl	8001b9c <PWM_CCU8_Start>
 800175c:	4603      	mov	r3, r0
 800175e:	75fb      	strb	r3, [r7, #23]
 8001760:	e005      	b.n	800176e <PWM_CCU8_Init+0x166>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]
 8001768:	e001      	b.n	800176e <PWM_CCU8_Init+0x166>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 800176a:	2302      	movs	r3, #2
 800176c:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 800176e:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU8_Init() api */
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8001788:	7c5b      	ldrb	r3, [r3, #17]
 800178a:	4610      	mov	r0, r2
 800178c:	2100      	movs	r1, #0
 800178e:	461a      	mov	r2, r3
 8001790:	f7ff fe24 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 800179c:	7c9b      	ldrb	r3, [r3, #18]
 800179e:	4610      	mov	r0, r2
 80017a0:	2102      	movs	r1, #2
 80017a2:	461a      	mov	r2, r3
 80017a4:	f7ff fe1a 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 80017b0:	7cdb      	ldrb	r3, [r3, #19]
 80017b2:	4610      	mov	r0, r2
 80017b4:	2103      	movs	r1, #3
 80017b6:	461a      	mov	r2, r3
 80017b8:	f7ff fe10 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 80017c4:	7d1b      	ldrb	r3, [r3, #20]
 80017c6:	4610      	mov	r0, r2
 80017c8:	2104      	movs	r1, #4
 80017ca:	461a      	mov	r2, r3
 80017cc:	f7ff fe06 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 80017d8:	7d5b      	ldrb	r3, [r3, #21]
 80017da:	4610      	mov	r0, r2
 80017dc:	2105      	movs	r1, #5
 80017de:	461a      	mov	r2, r3
 80017e0:	f7ff fdfc 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 80017ec:	7d9b      	ldrb	r3, [r3, #22]
 80017ee:	4610      	mov	r0, r2
 80017f0:	2101      	movs	r1, #1
 80017f2:	461a      	mov	r2, r3
 80017f4:	f7ff fdf2 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8001800:	7ddb      	ldrb	r3, [r3, #23]
 8001802:	4610      	mov	r0, r2
 8001804:	2108      	movs	r1, #8
 8001806:	461a      	mov	r2, r3
 8001808:	f7ff fde8 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 8001814:	7e1b      	ldrb	r3, [r3, #24]
 8001816:	4610      	mov	r0, r2
 8001818:	2109      	movs	r1, #9
 800181a:	461a      	mov	r2, r3
 800181c:	f7ff fdde 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 8001828:	7e5b      	ldrb	r3, [r3, #25]
 800182a:	4610      	mov	r0, r2
 800182c:	210a      	movs	r1, #10
 800182e:	461a      	mov	r2, r3
 8001830:	f7ff fdd4 	bl	80013dc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	7a1b      	ldrb	r3, [r3, #8]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	4618      	mov	r0, r3
 8001844:	2100      	movs	r1, #0
 8001846:	f7ff feb1 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	7a5b      	ldrb	r3, [r3, #9]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4618      	mov	r0, r3
 800185a:	2102      	movs	r1, #2
 800185c:	f7ff fea6 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	7a9b      	ldrb	r3, [r3, #10]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d005      	beq.n	8001876 <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4618      	mov	r0, r3
 8001870:	2103      	movs	r1, #3
 8001872:	f7ff fe9b 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	7adb      	ldrb	r3, [r3, #11]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4618      	mov	r0, r3
 8001886:	2104      	movs	r1, #4
 8001888:	f7ff fe90 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	7b1b      	ldrb	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	4618      	mov	r0, r3
 800189c:	2105      	movs	r1, #5
 800189e:	f7ff fe85 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	7b5b      	ldrb	r3, [r3, #13]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	2101      	movs	r1, #1
 80018b4:	f7ff fe7a 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	7b9b      	ldrb	r3, [r3, #14]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4618      	mov	r0, r3
 80018c8:	2108      	movs	r1, #8
 80018ca:	f7ff fe6f 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	7bdb      	ldrb	r3, [r3, #15]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	4618      	mov	r0, r3
 80018de:	2109      	movs	r1, #9
 80018e0:	f7ff fe64 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	7c1b      	ldrb	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4618      	mov	r0, r3
 80018f4:	210a      	movs	r1, #10
 80018f6:	f7ff fe59 	bl	80015ac <XMC_CCU8_SLICE_EnableEvent>
  }
}
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	461a      	mov	r2, r3
 800192e:	f7fe fd67 	bl	8000400 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00e      	beq.n	800195c <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 8001950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001952:	4608      	mov	r0, r1
 8001954:	4611      	mov	r1, r2
 8001956:	461a      	mov	r2, r3
 8001958:	f7fe fd52 	bl	8000400 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00e      	beq.n	8001986 <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 800197a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800197c:	4608      	mov	r0, r1
 800197e:	4611      	mov	r1, r2
 8001980:	461a      	mov	r2, r3
 8001982:	f7fe fd3d 	bl	8000400 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d010      	beq.n	80019b4 <PWM_CCU8_lInit_GPIO+0xb4>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4608      	mov	r0, r1
 80019ac:	4611      	mov	r1, r2
 80019ae:	461a      	mov	r2, r3
 80019b0:	f7fe fd26 	bl	8000400 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop

080019bc <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	4610      	mov	r0, r2
 80019d0:	2101      	movs	r1, #1
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7ff fc72 	bl	80012bc <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4610      	mov	r0, r2
 80019e4:	2102      	movs	r1, #2
 80019e6:	461a      	mov	r2, r3
 80019e8:	f7ff fc68 	bl	80012bc <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 80019f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f6:	4610      	mov	r0, r2
 80019f8:	2103      	movs	r1, #3
 80019fa:	461a      	mov	r2, r3
 80019fc:	f7ff fc5e 	bl	80012bc <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00e      	beq.n	8001a2a <PWM_CCU8_lConfigure_Events+0x6e>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6899      	ldr	r1, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                               handle_ptr->config_ptr->ext_start_mode);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 8001a1c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	f7ff fa71 	bl	8000f0c <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00e      	beq.n	8001a54 <PWM_CCU8_lConfigure_Events+0x98>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6899      	ldr	r1, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
                              handle_ptr->config_ptr->ext_stop_mode);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 8001a46:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a4a:	4608      	mov	r0, r1
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f7ff fa8a 	bl	8000f68 <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d009      	beq.n	8001a74 <PWM_CCU8_lConfigure_Events+0xb8>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f7ff fb56 	bl	8001120 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <PWM_CCU8_lConfigure_Events+0xd8>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff fb2c 	bl	80010ec <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d009      	beq.n	8001ab4 <PWM_CCU8_lConfigure_Events+0xf8>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff fb02 	bl	80010b8 <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <PWM_CCU8_lConfigure_Events+0x12c>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7ff fa76 	bl	8000fc0 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff fa86 	bl	8000ff4 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d011      	beq.n	8001b18 <PWM_CCU8_lConfigure_Events+0x15c>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6898      	ldr	r0, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001b04:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8001b0c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2303      	movs	r3, #3
 8001b14:	f7ff fa88 	bl	8001028 <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d11a      	bne.n	8001b5a <PWM_CCU8_lConfigure_Events+0x19e>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
                              handle_ptr->config_ptr->ext_trap_sync);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 8001b34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b38:	4608      	mov	r0, r1
 8001b3a:	4611      	mov	r1, r2
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f7ff fb21 	bl	8001184 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <PWM_CCU8_lConfigure_Events+0x19e>
    {
      XMC_CCU8_SLICE_EnableTrap(
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	210f      	movs	r1, #15
 8001b56:	f7ff fcef 	bl	8001538 <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <PWM_CCU8_lConfigure_Events+0x1b6>
      != handle_ptr->config_ptr->ext_override_level_event))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d011      	beq.n	8001b96 <PWM_CCU8_lConfigure_Events+0x1da>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7ff fb36 	bl	80011f8 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fadf 	bl	8001154 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7f1b      	ldrb	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <PWM_CCU8_Start+0x1c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f1b      	ldrb	r3, [r3, #28]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d117      	bne.n	8001be8 <PWM_CCU8_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7b5b      	ldrb	r3, [r3, #13]
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f7ff fca4 	bl	8001510 <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <PWM_CCU8_Start+0x42>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fcbf 	bl	800155c <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU8_Start() api */
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <PWM_CCU8_SetDutyCycleSymmetric>:
/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                                 uint32_t duty_cycle)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	72fb      	strb	r3, [r7, #11]
  PWM_CCU8_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU8_STATUS_FAILURE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	77fb      	strb	r3, [r7, #31]
  XMC_ASSERT("PWM_CCU8_SetDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	7f1b      	ldrb	r3, [r3, #28]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d036      	beq.n	8001c7c <PWM_CCU8_SetDutyCycleSymmetric+0x88>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU8_SYM_DUTY_MAX))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d831      	bhi.n	8001c7c <PWM_CCU8_SetDutyCycleSymmetric+0x88>
    {
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fca9 	bl	8001574 <XMC_CCU8_SLICE_GetTimerPeriodMatch>
 8001c22:	4603      	mov	r3, r0
 8001c24:	3301      	adds	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]

      /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
      compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001c2e:	3310      	adds	r3, #16
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <PWM_CCU8_SetDutyCycleSymmetric+0x94>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0b5b      	lsrs	r3, r3, #13
 8001c3e:	617b      	str	r3, [r7, #20]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	7afa      	ldrb	r2, [r7, #11]
 8001c4a:	4608      	mov	r0, r1
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f7ff fbac 	bl	80013ac <XMC_CCU8_SLICE_SetTimerCompareMatch>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7ff fc96 	bl	8001590 <XMC_CCU8_EnableShadowTransfer>

      if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <PWM_CCU8_SetDutyCycleSymmetric+0x7e>
      {
        handle_ptr->sym_duty1 = duty_cycle;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c70:	e002      	b.n	8001c78 <PWM_CCU8_SetDutyCycleSymmetric+0x84>
      }
      else
      {
        handle_ptr->sym_duty2 = duty_cycle;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
      }

      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
    }
  }
  return (status);
 8001c7c:	7ffb      	ldrb	r3, [r7, #31]
} /* end of PWM_CCU8_SetDutyCycleSymmetric() api */
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	d1b71759 	.word	0xd1b71759

08001c8c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]
}
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop

08001cac <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7b5b      	ldrb	r3, [r3, #13]
 8001cb8:	f083 0301 	eor.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00f      	beq.n	8001ce2 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7b1b      	ldrb	r3, [r3, #12]
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff f8a9 	bl	8000e24 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ffd8 	bl	8001c8c <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6819      	ldr	r1, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7c1a      	ldrb	r2, [r3, #16]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	f7fe fb7b 	bl	8000400 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6819      	ldr	r1, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7c1a      	ldrb	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7c5b      	ldrb	r3, [r3, #17]
 8001d16:	4608      	mov	r0, r1
 8001d18:	4611      	mov	r1, r2
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7ff fbd0 	bl	80014c0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop

08001d2c <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]

  return (status);
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <OSCHP_GetFrequency+0x10>)
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	00b71b00 	.word	0x00b71b00

08001d60 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <SystemCoreClockSetup+0x50>)
 8001d68:	1d3c      	adds	r4, r7, #4
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d70:	682b      	ldr	r3, [r5, #0]
 8001d72:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fc10 	bl	800059c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7fe fcfb 	bl	8000778 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7fe fcb0 	bl	80006e8 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8001d88:	2004      	movs	r0, #4
 8001d8a:	f7fe fd81 	bl	8000890 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	2120      	movs	r1, #32
 8001d92:	f7fe fde5 	bl	8000960 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7fe fcba 	bl	8000710 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7fe fd9f 	bl	80008e0 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7fe fd88 	bl	80008b8 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	08002068 	.word	0x08002068

08001db4 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8001dbe:	4811      	ldr	r0, [pc, #68]	; (8001e04 <DAVE_Init+0x50>)
 8001dc0:	f7ff ffb4 	bl	8001d2c <CLOCK_XMC4_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d104      	bne.n	8001dd8 <DAVE_Init+0x24>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 8001dce:	480e      	ldr	r0, [pc, #56]	; (8001e08 <DAVE_Init+0x54>)
 8001dd0:	f7ff fc1a 	bl	8001608 <PWM_CCU8_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d104      	bne.n	8001de8 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance in_trap */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&in_trap); 
 8001dde:	480b      	ldr	r0, [pc, #44]	; (8001e0c <DAVE_Init+0x58>)
 8001de0:	f7ff ff84 	bl	8001cec <DIGITAL_IO_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d104      	bne.n	8001df8 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance button1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button1); 
 8001dee:	4808      	ldr	r0, [pc, #32]	; (8001e10 <DAVE_Init+0x5c>)
 8001df0:	f7ff ff7c 	bl	8001cec <DIGITAL_IO_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001df8:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	1ffe8848 	.word	0x1ffe8848
 8001e08:	1ffe8800 	.word	0x1ffe8800
 8001e0c:	08002040 	.word	0x08002040
 8001e10:	08002054 	.word	0x08002054

08001e14 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	2201      	movs	r2, #1
 8001e24:	409a      	lsls	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	605a      	str	r2, [r3, #4]
}
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e46:	409a      	lsls	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	605a      	str	r2, [r3, #4]
}
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	f003 0301 	and.w	r3, r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <main>:
 * code.
 */
volatile float g_duty = 50.0f;

int main(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
    DAVE_STATUS_t status;

    status = DAVE_Init(); /* Initialization of DAVE APPs  */
 8001e86:	f7ff ff95 	bl	8001db4 <DAVE_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]

    if(status != DAVE_STATUS_SUCCESS)
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d000      	beq.n	8001e96 <main+0x16>
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while(1U)
        {

        }
 8001e94:	e7fe      	b.n	8001e94 <main+0x14>
    }

    /* Placeholder for user application code. The while loop below can be replaced with user application code. */
    while(1U)
    {
        if(g_duty > 100.0f)
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <main+0x8c>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f10 <main+0x90>
 8001ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea8:	dd03      	ble.n	8001eb2 <main+0x32>
        {
            g_duty = 100.0f;
 8001eaa:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <main+0x8c>)
 8001eac:	4a19      	ldr	r2, [pc, #100]	; (8001f14 <main+0x94>)
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e00b      	b.n	8001eca <main+0x4a>
        }
        else if(g_duty < 0.0f)
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <main+0x8c>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d503      	bpl.n	8001eca <main+0x4a>
        {
            g_duty = 0.0f;
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <main+0x8c>)
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
        }
        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                       ((uint32_t)g_duty * PWM_CCU8_DUTY_SCALE));
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <main+0x8c>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 2a90 	vmov	r2, s15
        }
        else if(g_duty < 0.0f)
        {
            g_duty = 0.0f;
        }
        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
 8001ed8:	2364      	movs	r3, #100	; 0x64
 8001eda:	fb03 f302 	mul.w	r3, r3, r2
 8001ede:	480e      	ldr	r0, [pc, #56]	; (8001f18 <main+0x98>)
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff fe86 	bl	8001bf4 <PWM_CCU8_SetDutyCycleSymmetric>
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                       ((uint32_t)g_duty * PWM_CCU8_DUTY_SCALE));
       if(READ_BUTTON1)
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <main+0x9c>)
 8001eea:	210d      	movs	r1, #13
 8001eec:	f7ff ffb4 	bl	8001e58 <XMC_GPIO_GetInput>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <main+0x80>
       {
           XMC_GPIO_SetOutputHigh(TRIP);
 8001ef6:	480a      	ldr	r0, [pc, #40]	; (8001f20 <main+0xa0>)
 8001ef8:	2107      	movs	r1, #7
 8001efa:	f7ff ff8b 	bl	8001e14 <XMC_GPIO_SetOutputHigh>
 8001efe:	e003      	b.n	8001f08 <main+0x88>
       }
       else
       {
           XMC_GPIO_SetOutputLow(TRIP);
 8001f00:	4807      	ldr	r0, [pc, #28]	; (8001f20 <main+0xa0>)
 8001f02:	2107      	movs	r1, #7
 8001f04:	f7ff ff96 	bl	8001e34 <XMC_GPIO_SetOutputLow>
       }
    }
 8001f08:	e7c5      	b.n	8001e96 <main+0x16>
 8001f0a:	bf00      	nop
 8001f0c:	1ffe8844 	.word	0x1ffe8844
 8001f10:	42c80000 	.word	0x42c80000
 8001f14:	42c80000 	.word	0x42c80000
 8001f18:	1ffe8800 	.word	0x1ffe8800
 8001f1c:	48028f00 	.word	0x48028f00
 8001f20:	48028000 	.word	0x48028000

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <__libc_init_array+0x3c>)
 8001f28:	4c0e      	ldr	r4, [pc, #56]	; (8001f64 <__libc_init_array+0x40>)
 8001f2a:	1ae4      	subs	r4, r4, r3
 8001f2c:	10a4      	asrs	r4, r4, #2
 8001f2e:	2500      	movs	r5, #0
 8001f30:	461e      	mov	r6, r3
 8001f32:	42a5      	cmp	r5, r4
 8001f34:	d004      	beq.n	8001f40 <__libc_init_array+0x1c>
 8001f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f3a:	4798      	blx	r3
 8001f3c:	3501      	adds	r5, #1
 8001f3e:	e7f8      	b.n	8001f32 <__libc_init_array+0xe>
 8001f40:	f7ff fae0 	bl	8001504 <_init>
 8001f44:	4c08      	ldr	r4, [pc, #32]	; (8001f68 <__libc_init_array+0x44>)
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <__libc_init_array+0x48>)
 8001f48:	1ae4      	subs	r4, r4, r3
 8001f4a:	10a4      	asrs	r4, r4, #2
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	461e      	mov	r6, r3
 8001f50:	42a5      	cmp	r5, r4
 8001f52:	d004      	beq.n	8001f5e <__libc_init_array+0x3a>
 8001f54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f58:	4798      	blx	r3
 8001f5a:	3501      	adds	r5, #1
 8001f5c:	e7f8      	b.n	8001f50 <__libc_init_array+0x2c>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	1ffe8848 	.word	0x1ffe8848
 8001f64:	1ffe8848 	.word	0x1ffe8848
 8001f68:	1ffe8848 	.word	0x1ffe8848
 8001f6c:	1ffe8848 	.word	0x1ffe8848

08001f70 <PWM_CCU8_0_timer_handle>:
	...
 8001f78:	00000014 00000001                       ........

08001f80 <PWM_CCU8_0_event0_config>:
 8001f80:	00010000                                ....

08001f84 <PWM_CCU8_0_event1_config>:
 8001f84:	00010000                                ....

08001f88 <PWM_CCU8_0_event2_config>:
 8001f88:	03010000                                ....

08001f8c <PWM_CCU8_0_dt_config>:
 8001f8c:	0000000d 00002424 00000000              ....$$......

08001f98 <PWM_CCU8_0_ch1_out0_config>:
 8001f98:	00000098 00010000 00000004              ............

08001fa4 <PWM_CCU8_0_ch1_out1_config>:
 8001fa4:	00000098 00010000 00000004              ............

08001fb0 <PWM_CCU8_0_config_handle>:
 8001fb0:	1c1f0001 0e100e10 00000000 00000000     ................
	...
 8001fcc:	08001f80 08001f84 08001f88 00000000     ................
	...
 8001fe4:	03010000 00000001 04000000 08001f8c     ................
 8001ff4:	00000001 08001f70 00000001 48028000     ....p..........H
 8002004:	00000005 08001f98 00000001 48028000     ...............H
 8002014:	00000002 08001fa4 00000000 00000000     ................
	...
 800203c:	1ffe8834                                4...

08002040 <in_trap>:
 8002040:	48028000 00000080 00000001 00000000     ...H............
 8002050:	00000007                                ....

08002054 <button1>:
 8002054:	48028f00 00000000 00000000 00000000     ...H............
 8002064:	0000000d 01010230 00010000 00000000     ....0...........
 8002074:	00010000 01010102                       ........
