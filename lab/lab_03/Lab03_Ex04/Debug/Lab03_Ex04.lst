
Lab03_Ex04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002da8  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  2 .data         00000060  1ffe8800  0c002da8  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000010  1ffe8860  0c002e08  00010860  2**2
                  ALLOC
  4 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 00000ce0  00000000  00000000  00010860  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000162ca  00000000  00000000  00011540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027c6  00000000  00000000  0002780a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005c19  00000000  00000000  00029fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003404  00000000  00000000  0002fbec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009a77  00000000  00000000  00032ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006d2c  00000000  00000000  0003ca67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  00043793  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000005ed  00000000  00000000  0004428b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	f9 2a 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .*..............
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c002da8 	.word	0x0c002da8
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	00000060 	.word	0x00000060
 8000254:	0c002da8 	.word	0x0c002da8
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe8860 	.word	0x1ffe8860
 8000264:	00000010 	.word	0x00000010
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08002b35 	.word	0x08002b35
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08002a21 	.word	0x08002a21

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f002 fa69 	bl	8002784 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f002 fad1 	bl	8002858 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f002 fab0 	bl	8002844 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a37      	ldr	r2, [pc, #220]	; (80004c8 <XMC_GPIO_Init+0x138>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a36      	ldr	r2, [pc, #216]	; (80004cc <XMC_GPIO_Init+0x13c>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e03c      	b.n	8000488 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	685a      	ldr	r2, [r3, #4]
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	409a      	lsls	r2, r3
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800041a:	7afb      	ldrb	r3, [r7, #11]
 800041c:	08db      	lsrs	r3, r3, #3
 800041e:	b2db      	uxtb	r3, r3
 8000420:	4618      	mov	r0, r3
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	08db      	lsrs	r3, r3, #3
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	3210      	adds	r2, #16
 800042e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	f003 0307 	and.w	r3, r3, #7
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4619      	mov	r1, r3
 800043c:	2307      	movs	r3, #7
 800043e:	408b      	lsls	r3, r1
 8000440:	43db      	mvns	r3, r3
 8000442:	ea02 0103 	and.w	r1, r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	f100 0210 	add.w	r2, r0, #16
 800044c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	08db      	lsrs	r3, r3, #3
 8000454:	b2db      	uxtb	r3, r3
 8000456:	4618      	mov	r0, r3
 8000458:	7afb      	ldrb	r3, [r7, #11]
 800045a:	08db      	lsrs	r3, r3, #3
 800045c:	b2db      	uxtb	r3, r3
 800045e:	461a      	mov	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	3210      	adds	r2, #16
 8000464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7a1b      	ldrb	r3, [r3, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	7afb      	ldrb	r3, [r7, #11]
 8000470:	f003 0307 	and.w	r3, r3, #7
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	ea42 0103 	orr.w	r1, r2, r3
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f100 0210 	add.w	r2, r0, #16
 8000484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	089b      	lsrs	r3, r3, #2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	7afb      	ldrb	r3, [r7, #11]
 8000492:	089b      	lsrs	r3, r3, #2
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3204      	adds	r2, #4
 800049c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	4619      	mov	r1, r3
 80004a6:	7afb      	ldrb	r3, [r7, #11]
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	ea42 0103 	orr.w	r1, r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	1d02      	adds	r2, r0, #4
 80004ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	48028e00 	.word	0x48028e00
 80004cc:	48028f00 	.word	0x48028f00

080004d0 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <XMC_SCU_GetMirrorStatus+0x14>)
 80004d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	50004000 	.word	0x50004000

080004e8 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004f0:	f7ff fee4 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <XMC_SCU_lDelay+0x3c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <XMC_SCU_lDelay+0x40>)
 80004fa:	fba2 2303 	umull	r2, r3, r2, r3
 80004fe:	0c9a      	lsrs	r2, r3, #18
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	fb02 f303 	mul.w	r3, r2, r3
 8000506:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	e003      	b.n	8000516 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800050e:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	3301      	adds	r3, #1
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	d3f7      	bcc.n	800050e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	2003ffc0 	.word	0x2003ffc0
 8000528:	431bde83 	.word	0x431bde83

0800052c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800052c:	b5b0      	push	{r4, r5, r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000534:	2000      	movs	r0, #0
 8000536:	f000 f88b 	bl	8000650 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800053a:	f000 fa39 	bl	80009b0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	79db      	ldrb	r3, [r3, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00a      	beq.n	800055c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000546:	f000 fa71 	bl	8000a2c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800054a:	bf00      	nop
 800054c:	f000 fa5c 	bl	8000a08 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000550:	4603      	mov	r3, r0
 8000552:	f083 0301 	eor.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1f7      	bne.n	800054c <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	7a5b      	ldrb	r3, [r3, #9]
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f8ef 	bl	8000744 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8000566:	bf00      	nop
 8000568:	f7ff ffb2 	bl	80004d0 <XMC_SCU_GetMirrorStatus>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1fa      	bne.n	8000568 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	7a1b      	ldrb	r3, [r3, #8]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f9f4 	bl	8000964 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7c1b      	ldrb	r3, [r3, #16]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f8fd 	bl	8000780 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7c5b      	ldrb	r3, [r3, #17]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f920 	bl	80007d0 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7c9b      	ldrb	r3, [r3, #18]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 f907 	bl	80007a8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	7cdb      	ldrb	r3, [r3, #19]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f92a 	bl	80007f8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	799b      	ldrb	r3, [r3, #6]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00a      	beq.n	80005c2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ac:	f000 fa72 	bl	8000a94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005b0:	bf00      	nop
 80005b2:	f000 fa97 	bl	8000ae4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f083 0301 	eor.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d1f7      	bne.n	80005b2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	78db      	ldrb	r3, [r3, #3]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d102      	bne.n	80005d0 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005ca:	f000 faaf 	bl	8000b2c <XMC_SCU_CLOCK_DisableSystemPll>
 80005ce:	e014      	b.n	80005fa <XMC_SCU_CLOCK_Init+0xce>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80005d0:	f000 fa9c 	bl	8000b0c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	8899      	ldrh	r1, [r3, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005e0:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005e6:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	4608      	mov	r0, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	462a      	mov	r2, r5
 80005f4:	4623      	mov	r3, r4
 80005f6:	f000 faa9 	bl	8000b4c <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000602:	d103      	bne.n	800060c <XMC_SCU_CLOCK_Init+0xe0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000604:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000608:	f000 f822 	bl	8000650 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800060c:	f7ff fe56 	bl	80002bc <SystemCoreClockUpdate>
}
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	bf00      	nop

08000618 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	0f1b      	lsrs	r3, r3, #28
 8000624:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800062c:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4613      	mov	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	4413      	add	r3, r2
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	461a      	mov	r2, r3
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800063c:	4413      	add	r3, r2
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	50004414 	.word	0x50004414

08000650 <XMC_SCU_CLOCK_SetSystemClockSource>:
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000658:	4906      	ldr	r1, [pc, #24]	; (8000674 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	50004600 	.word	0x50004600

08000678 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000680:	4906      	ldr	r1, [pc, #24]	; (800069c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	50004600 	.word	0x50004600

080006a0 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006a8:	4906      	ldr	r1, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	50004600 	.word	0x50004600

080006c8 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d108      	bne.n	80006ea <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006d8:	4a0a      	ldr	r2, [pc, #40]	; (8000704 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006e2:	f023 0301 	bic.w	r3, r3, #1
 80006e6:	60d3      	str	r3, [r2, #12]
 80006e8:	e007      	b.n	80006fa <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006ec:	4b05      	ldr	r3, [pc, #20]	; (8000704 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	60d3      	str	r3, [r2, #12]
  }
}
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	50004710 	.word	0x50004710

08000708 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000712:	bf00      	nop
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000716:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800071a:	f003 0308 	and.w	r3, r3, #8
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f8      	bne.n	8000714 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000722:	4907      	ldr	r1, [pc, #28]	; (8000740 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 800072c:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800072e:	4313      	orrs	r3, r2
 8000730:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	50004000 	.word	0x50004000
 8000740:	50004300 	.word	0x50004300

08000744 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800074e:	bf00      	nop
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000752:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f8      	bne.n	8000750 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800075e:	4907      	ldr	r1, [pc, #28]	; (800077c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000768:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800076a:	4313      	orrs	r3, r2
 800076c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	50004000 	.word	0x50004000
 800077c:	50004300 	.word	0x50004300

08000780 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000788:	4906      	ldr	r1, [pc, #24]	; (80007a4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800078c:	68db      	ldr	r3, [r3, #12]
 800078e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000796:	4313      	orrs	r3, r2
 8000798:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	50004600 	.word	0x50004600

080007a8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007b4:	6a1b      	ldr	r3, [r3, #32]
 80007b6:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007be:	4313      	orrs	r3, r2
 80007c0:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	50004600 	.word	0x50004600

080007d0 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007d8:	4906      	ldr	r1, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80007e6:	4313      	orrs	r3, r2
 80007e8:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	50004600 	.word	0x50004600

080007f8 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000800:	4906      	ldr	r1, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800080e:	4313      	orrs	r3, r2
 8000810:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	50004600 	.word	0x50004600

08000820 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000828:	4906      	ldr	r1, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004600 	.word	0x50004600

08000848 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800085e:	4313      	orrs	r3, r2
 8000860:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	50004600 	.word	0x50004600

08000870 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000886:	4313      	orrs	r3, r2
 8000888:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	50004600 	.word	0x50004600

08000898 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	6053      	str	r3, [r2, #4]
}
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	50004600 	.word	0x50004600

080008b8 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0f1b      	lsrs	r3, r3, #28
 80008c4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008cc:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80008ce:	68fa      	ldr	r2, [r7, #12]
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	461a      	mov	r2, r3
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 80008dc:	4413      	add	r3, r2
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	601a      	str	r2, [r3, #0]
}
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	50004648 	.word	0x50004648

080008f0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000906:	4a16      	ldr	r2, [pc, #88]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000912:	4913      	ldr	r1, [pc, #76]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	3b01      	subs	r3, #1
 8000918:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3b01      	subs	r3, #1
 800091e:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000920:	4313      	orrs	r3, r2
 8000922:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f023 0310 	bic.w	r3, r3, #16
 800093a:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800093c:	4a08      	ldr	r2, [pc, #32]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000946:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000948:	bf00      	nop
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f9      	beq.n	800094a <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004710 	.word	0x50004710

08000964 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000978:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10e      	bne.n	800099e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800098a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 800098c:	2064      	movs	r0, #100	; 0x64
 800098e:	f7ff fdab 	bl	80004e8 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000992:	4a06      	ldr	r2, [pc, #24]	; (80009ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800099c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800099e:	2064      	movs	r0, #100	; 0x64
 80009a0:	f7ff fda2 	bl	80004e8 <XMC_SCU_lDelay>
}
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	50004710 	.word	0x50004710

080009b0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d109      	bne.n	80009d4 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80009c6:	bf00      	nop
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f9      	beq.n	80009c8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00a      	beq.n	80009f6 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e6:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80009e8:	bf00      	nop
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f9      	bne.n	80009ea <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	50004200 	.word	0x50004200
 8000a04:	50004400 	.word	0x50004400

08000a08 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf0c      	ite	eq
 8000a18:	2301      	moveq	r3, #1
 8000a1a:	2300      	movne	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	50004300 	.word	0x50004300

08000a2c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000a30:	bf00      	nop
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f8      	bne.n	8000a32 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000a40:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a4a:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000a4c:	bf00      	nop
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f8      	bne.n	8000a4e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8000a68:	bf00      	nop
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x60>)
 8000a6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f8      	bne.n	8000a6a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8000a7e:	bf00      	nop
 8000a80:	f7ff fd26 	bl	80004d0 <XMC_SCU_GetMirrorStatus>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1fa      	bne.n	8000a80 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	50004000 	.word	0x50004000
 8000a90:	50004300 	.word	0x50004300

08000a94 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000a94:	b5b0      	push	{r4, r5, r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000a98:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aa2:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000aa4:	4d0d      	ldr	r5, [pc, #52]	; (8000adc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000aae:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000ab2:	f001 fec7 	bl	8002844 <OSCHP_GetFrequency>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000aba:	fba3 2302 	umull	r2, r3, r3, r2
 8000abe:	0d1b      	lsrs	r3, r3, #20
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000aca:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000ad2:	6053      	str	r3, [r2, #4]
}
 8000ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	50004710 	.word	0x50004710
 8000adc:	50004700 	.word	0x50004700
 8000ae0:	6b5fca6b 	.word	0x6b5fca6b

08000ae4 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000af0:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000af4:	bf0c      	ite	eq
 8000af6:	2301      	moveq	r3, #1
 8000af8:	2300      	movne	r3, #0
 8000afa:	b2db      	uxtb	r3, r3
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	50004710 	.word	0x50004710

08000b0c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b10:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b1a:	f023 0302 	bic.w	r3, r3, #2
 8000b1e:	6053      	str	r3, [r2, #4]
}
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	50004710 	.word	0x50004710

08000b2c <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	6053      	str	r3, [r2, #4]
}
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	50004710 	.word	0x50004710

08000b4c <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60ba      	str	r2, [r7, #8]
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4603      	mov	r3, r0
 8000b58:	81fb      	strh	r3, [r7, #14]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fdb1 	bl	80006c8 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000b66:	7b7b      	ldrb	r3, [r7, #13]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	f040 8084 	bne.w	8000c76 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d109      	bne.n	8000b88 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000b74:	f001 fe66 	bl	8002844 <OSCHP_GetFrequency>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ca8 <XMC_SCU_CLOCK_StartSystemPll+0x15c>)
 8000b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8000b80:	0c9b      	lsrs	r3, r3, #18
 8000b82:	059b      	lsls	r3, r3, #22
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e002      	b.n	8000b8e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000b88:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000b8c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	fb02 f203 	mul.w	r2, r2, r3
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	091b      	lsrs	r3, r3, #4
 8000ba8:	0d9b      	lsrs	r3, r3, #22
 8000baa:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000bac:	4a40      	ldr	r2, [pc, #256]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bae:	4b40      	ldr	r3, [pc, #256]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bb8:	4a3d      	ldr	r2, [pc, #244]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bba:	4b3d      	ldr	r3, [pc, #244]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000bc4:	493a      	ldr	r1, [pc, #232]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc6:	4b3a      	ldr	r3, [pc, #232]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8000bcc:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	0212      	lsls	r2, r2, #8
 8000bd4:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000bdc:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000be8:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf2:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000bf4:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f023 0310 	bic.w	r3, r3, #16
 8000bfe:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c00:	4a2b      	ldr	r2, [pc, #172]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c02:	4b2b      	ldr	r3, [pc, #172]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c0a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000c0c:	bf00      	nop
 8000c0e:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f9      	beq.n	8000c0e <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c1a:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1c:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f023 0301 	bic.w	r3, r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000c26:	bf00      	nop
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f9      	bne.n	8000c28 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	095b      	lsrs	r3, r3, #5
 8000c3e:	0d9b      	lsrs	r3, r3, #22
 8000c40:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c42:	6a3a      	ldr	r2, [r7, #32]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d202      	bcs.n	8000c50 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c4a:	6938      	ldr	r0, [r7, #16]
 8000c4c:	f000 f838 	bl	8000cc0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	085b      	lsrs	r3, r3, #1
 8000c54:	4a19      	ldr	r2, [pc, #100]	; (8000cbc <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	0d9b      	lsrs	r3, r3, #22
 8000c5e:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000c60:	6a3a      	ldr	r2, [r7, #32]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d202      	bcs.n	8000c6e <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000c68:	6938      	ldr	r0, [r7, #16]
 8000c6a:	f000 f829 	bl	8000cc0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000c6e:	6a38      	ldr	r0, [r7, #32]
 8000c70:	f000 f826 	bl	8000cc0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000c74:	e015      	b.n	8000ca2 <XMC_SCU_CLOCK_StartSystemPll+0x156>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c78:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000c84:	4313      	orrs	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c88:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c94:	bf00      	nop
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f9      	beq.n	8000c96 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	aaaaaaab 	.word	0xaaaaaaab
 8000cb0:	50004710 	.word	0x50004710
 8000cb4:	f08080ff 	.word	0xf08080ff
 8000cb8:	88888889 	.word	0x88888889
 8000cbc:	b60b60b7 	.word	0xb60b60b7

08000cc0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000cdc:	2032      	movs	r0, #50	; 0x32
 8000cde:	f7ff fc03 	bl	80004e8 <XMC_SCU_lDelay>
}
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	50004710 	.word	0x50004710

08000cec <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	60da      	str	r2, [r3, #12]
}
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <XMC_CCU8_lDeassertReset+0x30>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d103      	bne.n	8000d3c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	f7ff fc6f 	bl	8000618 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000d3a:	e007      	b.n	8000d4c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <XMC_CCU8_lDeassertReset+0x34>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d103      	bne.n	8000d4c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8000d44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d48:	f7ff fc66 	bl	8000618 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40024000 	.word	0x40024000

08000d5c <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <XMC_CCU8_lUngateClock+0x30>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d103      	bne.n	8000d74 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	f7ff fda3 	bl	80008b8 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000d72:	e007      	b.n	8000d84 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <XMC_CCU8_lUngateClock+0x34>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d103      	bne.n	8000d84 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8000d7c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d80:	f7ff fd9a 	bl	80008b8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40024000 	.word	0x40024000

08000d94 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000d9c:	2010      	movs	r0, #16
 8000d9e:	f7ff fd7b 	bl	8000898 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffda 	bl	8000d5c <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ffbb 	bl	8000d24 <XMC_CCU8_lDeassertReset>
#endif
}
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ffe7 	bl	8000d94 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff90 	bl	8000cec <XMC_CCU8_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	039b      	lsls	r3, r3, #14
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff86 	bl	8000d0c <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	7b5b      	ldrb	r3, [r3, #13]
 8000e0c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	051a      	lsls	r2, r3, #20
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	7b1b      	ldrb	r3, [r3, #12]
 8000e1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	7b1b      	ldrb	r3, [r3, #12]
 8000e2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	7b5b      	ldrb	r3, [r3, #13]
 8000e3c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f083 0214 	eor.w	r2, r3, #20
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop

08000e64 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	0c1b      	lsrs	r3, r3, #16
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) ||\
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	f023 0303 	bic.w	r3, r3, #3
 8000eb8:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	60fb      	str	r3, [r7, #12]

  if(start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
 8000ece:	78bb      	ldrb	r3, [r7, #2]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d104      	bne.n	8000ede <XMC_CCU8_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e003      	b.n	8000ee6 <XMC_CCU8_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	615a      	str	r2, [r3, #20]
}
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f023 030c 	bic.w	r3, r3, #12
 8000f14:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f32:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
 8000f34:	78bb      	ldrb	r3, [r7, #2]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	615a      	str	r2, [r3, #20]
}
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f68:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	031b      	lsls	r3, r3, #12
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	605a      	str	r2, [r3, #4]
}
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f9c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	01db      	lsls	r3, r3, #7
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	615a      	str	r2, [r3, #20]
}
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	70fb      	strb	r3, [r7, #3]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	70bb      	strb	r3, [r7, #2]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	707b      	strb	r3, [r7, #1]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode", 
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) ||\
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fde:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
 8000fe0:	78fb      	ldrb	r3, [r7, #3]
 8000fe2:	049b      	lsls	r3, r3, #18
 8000fe4:	68ba      	ldr	r2, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if(mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000ff6:	78bb      	ldrb	r3, [r7, #2]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d104      	bne.n	8001006 <XMC_CCU8_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	e003      	b.n	800100e <XMC_CCU8_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800100c:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if(synch_with_pwm == true)
 800100e:	7e3b      	ldrb	r3, [r7, #24]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <XMC_CCU8_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e003      	b.n	8001026 <XMC_CCU8_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001024:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 800102c:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	06db      	lsls	r3, r3, #27
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	615a      	str	r2, [r3, #20]
}
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001060:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	039b      	lsls	r3, r3, #14
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4313      	orrs	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	605a      	str	r2, [r3, #4]
}
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001094:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	605a      	str	r2, [r3, #4]
}
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010c8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	029b      	lsls	r3, r3, #10
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	605a      	str	r2, [r3, #4]
}
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	605a      	str	r2, [r3, #4]
}
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	70fb      	strb	r3, [r7, #3]
 8001120:	4613      	mov	r3, r2
 8001122:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68ba      	ldr	r2, [r7, #8]
 800113e:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if(synch_with_pwm == true)
 8001146:	78bb      	ldrb	r3, [r7, #2]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <XMC_CCU8_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	e003      	b.n	800115e <XMC_CCU8_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800115c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if(exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d104      	bne.n	800116e <XMC_CCU8_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	e003      	b.n	8001176 <XMC_CCU8_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001174:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	615a      	str	r2, [r3, #20]
}
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;  
#else
  ins = slice->INS;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011a0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	049b      	lsls	r3, r3, #18
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80011b4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	051b      	lsls	r3, r3, #20
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	4313      	orrs	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011c8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011dc:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	789b      	ldrb	r3, [r3, #2]
 80011e2:	061b      	lsls	r3, r3, #24
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 80011f0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	06db      	lsls	r3, r3, #27
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001204:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	78db      	ldrb	r3, [r3, #3]
 800120a:	075b      	lsls	r3, r3, #29
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4313      	orrs	r3, r2
 8001210:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001218:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	4313      	orrs	r3, r2
 8001224:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800122c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	4313      	orrs	r3, r2
 8001238:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]
#endif
}
 8001240:	371c      	adds	r7, #28
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop

0800124c <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	460b      	mov	r3, r1
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	72fb      	strb	r3, [r7, #11]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	3b01      	subs	r3, #1
 800125e:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8001266:	7ffb      	ldrb	r3, [r7, #31]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3310      	adds	r3, #16
 800126e:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	461a      	mov	r2, r3
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
 8001292:	7ffb      	ldrb	r3, [r7, #31]
 8001294:	3316      	adds	r3, #22
 8001296:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2201      	movs	r2, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	789b      	ldrb	r3, [r3, #2]
 80012ac:	461a      	mov	r2, r3
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 80012ba:	7ffb      	ldrb	r3, [r7, #31]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	3319      	adds	r3, #25
 80012c2:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	461a      	mov	r2, r3
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80012e6:	7ffb      	ldrb	r3, [r7, #31]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]
#endif
}
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop

08001320 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800132c:	887a      	ldrh	r2, [r7, #2]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
                                         const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                         const uint16_t compare_val)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
 8001348:	4613      	mov	r3, r2
 800134a:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8001352:	883a      	ldrh	r2, [r7, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c
 8001358:	e002      	b.n	8001360 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800135a:	883a      	ldrh	r2, [r7, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
 8001378:	4613      	mov	r3, r2
 800137a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  srs = slice->SRS;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001382:	60fb      	str	r3, [r7, #12]

  switch(event)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b09      	cmp	r3, #9
 8001388:	d831      	bhi.n	80013ee <XMC_CCU8_SLICE_SetInterruptNode+0x82>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <XMC_CCU8_SLICE_SetInterruptNode+0x24>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013b9 	.word	0x080013b9
 8001394:	080013b9 	.word	0x080013b9
 8001398:	080013c3 	.word	0x080013c3
 800139c:	080013c3 	.word	0x080013c3
 80013a0:	080013cd 	.word	0x080013cd
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	080013ef 	.word	0x080013ef
 80013ac:	080013ef 	.word	0x080013ef
 80013b0:	080013d7 	.word	0x080013d7
 80013b4:	080013e3 	.word	0x080013e3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 80013b8:	2303      	movs	r3, #3
 80013ba:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
      break;
 80013c0:	e01b      	b.n	80013fa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 80013c2:	230c      	movs	r3, #12
 80013c4:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 80013c6:	2302      	movs	r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
      break;
 80013ca:	e016      	b.n	80013fa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 80013cc:	2330      	movs	r3, #48	; 0x30
 80013ce:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 80013d0:	2304      	movs	r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
      break;
 80013d4:	e011      	b.n	80013fa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 80013d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013da:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 80013dc:	2308      	movs	r3, #8
 80013de:	613b      	str	r3, [r7, #16]
      break;
 80013e0:	e00b      	b.n	80013fa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 80013e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013e6:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 80013e8:	230a      	movs	r3, #10
 80013ea:	613b      	str	r3, [r7, #16]
      break;
 80013ec:	e005      	b.n	80013fa <XMC_CCU8_SLICE_SetInterruptNode+0x8e>

    default:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 80013ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80013f2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 80013f4:	230c      	movs	r3, #12
 80013f6:	613b      	str	r3, [r7, #16]
      break;
 80013f8:	bf00      	nop
  }
  
  srs &= ~mask;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001404:	78ba      	ldrb	r2, [r7, #2]
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  
  slice->SRS = srs;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
 800145c:	4613      	mov	r3, r2
 800145e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4619      	mov	r1, r3
 800146a:	2303      	movs	r3, #3
 800146c:	408b      	lsls	r3, r1
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800147a:	78bb      	ldrb	r3, [r7, #2]
 800147c:	78f9      	ldrb	r1, [r7, #3]
 800147e:	0049      	lsls	r1, r1, #1
 8001480:	408b      	lsls	r3, r1
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop

08001494 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 800149e:	783b      	ldrb	r3, [r7, #0]
 80014a0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014d2:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	079b      	lsls	r3, r3, #30
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800151e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop

08001534 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001542:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop

08001558 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001566:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800158a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop

080015a0 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff f987 	bl	80008b8 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff f834 	bl	8000618 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop

080015b4 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 80015be:	f7ff ffef 	bl	80015a0 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop

08001608 <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001616:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e016      	b.n	8001654 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001636:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 800163e:	bf00      	nop
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f8      	bne.n	8001640 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	3301      	adds	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d9e5      	bls.n	8001626 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	08002b80 	.word	0x08002b80

08001668 <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	2300      	movs	r3, #0
 800167c:	f000 f828 	bl	80016d0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	2300      	movs	r3, #0
 800168a:	f000 f821 	bl	80016d0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	6899      	ldr	r1, [r3, #8]
 8001694:	2200      	movs	r2, #0
 8001696:	2301      	movs	r3, #1
 8001698:	f000 f81a 	bl	80016d0 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	6899      	ldr	r1, [r3, #8]
 80016a2:	2201      	movs	r2, #1
 80016a4:	2301      	movs	r3, #1
 80016a6:	f000 f813 	bl	80016d0 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	f7ff fee6 	bl	8001494 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop

080016d0 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b08d      	sub	sp, #52	; 0x34
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d113      	bne.n	800170e <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 80016e6:	2308      	movs	r3, #8
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 80016ea:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 80016f4:	231f      	movs	r3, #31
 80016f6:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 80016f8:	7a3b      	ldrb	r3, [r7, #8]
 80016fa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8001702:	7a7b      	ldrb	r3, [r7, #9]
 8001704:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	76fb      	strb	r3, [r7, #27]
 800170c:	e013      	b.n	8001736 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800170e:	2318      	movs	r3, #24
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8001712:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8001718:	2310      	movs	r3, #16
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 800171c:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 8001720:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 8001722:	7abb      	ldrb	r3, [r7, #10]
 8001724:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001728:	b2db      	uxtb	r3, r3
 800172a:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	3228      	adds	r2, #40	; 0x28
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	43db      	mvns	r3, r3
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	4013      	ands	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 800174c:	7efa      	ldrb	r2, [r7, #27]
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4313      	orrs	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	43db      	mvns	r3, r3
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4013      	ands	r3, r2
 8001762:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	3228      	adds	r2, #40	; 0x28
 8001778:	6979      	ldr	r1, [r7, #20]
 800177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800177e:	3734      	adds	r7, #52	; 0x34
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800179a:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f023 0303 	bic.w	r3, r3, #3
 80017a2:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop

080017c0 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	75fb      	strb	r3, [r7, #23]
 80017ce:	e009      	b.n	80017e4 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	4a39      	ldr	r2, [pc, #228]	; (80018b8 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff feab 	bl	8001534 <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	3301      	adds	r3, #1
 80017e2:	75fb      	strb	r3, [r7, #23]
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d9f2      	bls.n	80017d0 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 80017fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001800:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	75fb      	strb	r3, [r7, #23]
 8001806:	e021      	b.n	800184c <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	4a2b      	ldr	r2, [pc, #172]	; (80018b8 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001814:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800181c:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	021b      	lsls	r3, r3, #8
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	3301      	adds	r3, #1
 800184a:	75fb      	strb	r3, [r7, #23]
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9da      	bls.n	8001808 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800185a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d107      	bne.n	8001890 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001886:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]
 8001894:	e009      	b.n	80018aa <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fe36 	bl	8001510 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	3301      	adds	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d9f2      	bls.n	8001896 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	08002b80 	.word	0x08002b80

080018bc <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fe58 	bl	800157c <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f023 0303 	bic.w	r3, r3, #3
 80018da:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <XMC_VADC_GROUP_QueueInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8001914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f043 0201 	orr.w	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d107      	bne.n	800194a <XMC_VADC_GROUP_QueueInit+0x8e>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001940:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fe04 	bl	8001558 <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop

08001958 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800196a:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f023 030f 	bic.w	r3, r3, #15
 8001972:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop

08001990 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a8:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2201      	movs	r2, #1
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4013      	ands	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7b5b      	ldrb	r3, [r3, #13]
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db29      	blt.n	8001a2e <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d10a      	bne.n	80019fa <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 80019e4:	2308      	movs	r3, #8
 80019e6:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80019ee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80019f8:	e00c      	b.n	8001a14 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a0a:	f023 021f 	bic.w	r2, r3, #31
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	7b52      	ldrb	r2, [r2, #13]
 8001a1e:	b251      	sxtb	r1, r2
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	fa01 f202 	lsl.w	r2, r1, r2
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6819      	ldr	r1, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	3280      	adds	r2, #128	; 0x80
 8001a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop

08001a6c <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	71fb      	strb	r3, [r7, #7]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b07      	cmp	r3, #7
 8001a7e:	d818      	bhi.n	8001ab2 <XMC_VADC_GROUP_SetResultInterruptNode+0x46>
  {
    route_mask  = group_ptr->REVNP0;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8001a86:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	230f      	movs	r3, #15
 8001a90:	4093      	lsls	r3, r2
 8001a92:	43db      	mvns	r3, r3
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	4013      	ands	r3, r2
 8001a98:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8001ab0:	e01e      	b.n	8001af0 <XMC_VADC_GROUP_SetResultInterruptNode+0x84>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001ab8:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ac0:	3b08      	subs	r3, #8
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	230f      	movs	r3, #15
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	43db      	mvns	r3, r3
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ada:	3b08      	subs	r3, #8
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
}
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <VADC_GROUP_CONFIG_Init>:
 *   @ref VADC_GROUP_CONFIG_STATUS_SUCCESS - on successful initialization.\n
 *   @ref VADC_GROUP_CONFIG_STATUS_FAILURE - if initialization fails.\n
 *
 */
VADC_GROUP_CONFIG_STATUS_t VADC_GROUP_CONFIG_Init(const VADC_GROUP_CONFIG_t *const handle)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  VADC_GROUP_CONFIG_STATUS_t status;
  XMC_ASSERT("VADC_GROUP_CONFIG_Init APP handle function pointer uninitialized", ((handle != NULL) &&
                                                                                  (handle->init_func !=NULL)))

  status = VADC_GROUP_CONFIG_STATUS_SUCCESS;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]

  status = handle->init_func();
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4798      	blx	r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001b3a:	f023 0203 	bic.w	r2, r3, #3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop

08001b60 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	32a0      	adds	r2, #160	; 0xa0
 8001b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <vadc_group_0_Init>:



/**********************************************************************************************************************/
VADC_GROUP_CONFIG_STATUS_t vadc_group_0_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
  VADC_GROUP_CONFIG_STATUS_t status;
  int index;

  status  = (VADC_GROUP_CONFIG_STATUS_t) VADC_GLOBAL_CONFIG_Init(&VADC_GLOBAL_CONFIG_0);
 8001ba6:	482c      	ldr	r0, [pc, #176]	; (8001c58 <vadc_group_0_Init+0xb8>)
 8001ba8:	f000 f862 	bl	8001c70 <VADC_GLOBAL_CONFIG_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	70fb      	strb	r3, [r7, #3]

  /* Request source initializations*/
  XMC_VADC_GROUP_QueueInit(vadc_group_0_GROUP_PTR, &vadc_group_0_queue_config);
 8001bb0:	482a      	ldr	r0, [pc, #168]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001bb2:	492b      	ldr	r1, [pc, #172]	; (8001c60 <vadc_group_0_Init+0xc0>)
 8001bb4:	f7ff fe82 	bl	80018bc <XMC_VADC_GROUP_QueueInit>
  XMC_VADC_GROUP_QueueSetGatingMode(vadc_group_0_GROUP_PTR, (XMC_VADC_GATEMODE_t) XMC_VADC_GATEMODE_IGNORE);
 8001bb8:	4828      	ldr	r0, [pc, #160]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	f7ff ffb4 	bl	8001b28 <XMC_VADC_GROUP_QueueSetGatingMode>
  XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(vadc_group_0_GROUP_PTR, (XMC_VADC_SR_t) XMC_VADC_SR_GROUP_SR0);
 8001bc0:	4826      	ldr	r0, [pc, #152]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	f7ff fec8 	bl	8001958 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
  
  
  
  
  /* CHANNEL init*/
  index = (int)vadc_group_0_NUM_OF_CHANNELS;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  while (index >= 0)
 8001bcc:	e010      	b.n	8001bf0 <vadc_group_0_Init+0x50>
  {
    XMC_VADC_GROUP_ChannelInit(vadc_group_0_GROUP_PTR,
                               (uint32_t)vadc_group_0_channel_config[index].ch_num,
 8001bce:	4a25      	ldr	r2, [pc, #148]	; (8001c64 <vadc_group_0_Init+0xc4>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	791b      	ldrb	r3, [r3, #4]
  
  /* CHANNEL init*/
  index = (int)vadc_group_0_NUM_OF_CHANNELS;
  while (index >= 0)
  {
    XMC_VADC_GROUP_ChannelInit(vadc_group_0_GROUP_PTR,
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <vadc_group_0_Init+0xc4>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001be2:	481e      	ldr	r0, [pc, #120]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001be4:	461a      	mov	r2, r3
 8001be6:	f7ff fed3 	bl	8001990 <XMC_VADC_GROUP_ChannelInit>
                               (uint32_t)vadc_group_0_channel_config[index].ch_num,
                               vadc_group_0_channel_config[index].ch_handle);
    index--;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
  
  
  
  /* CHANNEL init*/
  index = (int)vadc_group_0_NUM_OF_CHANNELS;
  while (index >= 0)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	daeb      	bge.n	8001bce <vadc_group_0_Init+0x2e>
                               vadc_group_0_channel_config[index].ch_handle);
    index--;
  }
  
  /* result init */
  index = (int)vadc_group_0_NUM_OF_RESULT_REGISTERS;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  while (index >= 0)
 8001bfa:	e010      	b.n	8001c1e <vadc_group_0_Init+0x7e>
  {
    XMC_VADC_GROUP_ResultInit(vadc_group_0_GROUP_PTR,
                              (uint32_t)vadc_group_0_result_config[index].res_reg_num,
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <vadc_group_0_Init+0xc8>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	791b      	ldrb	r3, [r3, #4]
  
  /* result init */
  index = (int)vadc_group_0_NUM_OF_RESULT_REGISTERS;
  while (index >= 0)
  {
    XMC_VADC_GROUP_ResultInit(vadc_group_0_GROUP_PTR,
 8001c06:	4619      	mov	r1, r3
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <vadc_group_0_Init+0xc8>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c10:	4812      	ldr	r0, [pc, #72]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001c12:	461a      	mov	r2, r3
 8001c14:	f7ff ffb2 	bl	8001b7c <XMC_VADC_GROUP_ResultInit>
                              (uint32_t)vadc_group_0_result_config[index].res_reg_num,
                              vadc_group_0_result_config[index].res_handle);
    index--;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
    index--;
  }
  
  /* result init */
  index = (int)vadc_group_0_NUM_OF_RESULT_REGISTERS;
  while (index >= 0)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	daeb      	bge.n	8001bfc <vadc_group_0_Init+0x5c>


  
  
  /* Result event node pointer configuration for Result Register-0*/
  XMC_VADC_GROUP_SetResultInterruptNode(vadc_group_0_GROUP_PTR, (uint32_t)0, (XMC_VADC_SR_t)XMC_VADC_SR_GROUP_SR1);
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001c26:	2100      	movs	r1, #0
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f7ff ff1f 	bl	8001a6c <XMC_VADC_GROUP_SetResultInterruptNode>

  
  
  
  /* Insert channels in to the background request sources*/
  index = (int)vadc_group_0_TOTAL_QUEUE_ENTIRES;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  while (index >= 0)
 8001c32:	e008      	b.n	8001c46 <vadc_group_0_Init+0xa6>
  {
    XMC_VADC_GROUP_QueueInsertChannel(vadc_group_0_GROUP_PTR, vadc_group_0_queue_entries[index--]);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	607a      	str	r2, [r7, #4]
 8001c3a:	4a0c      	ldr	r2, [pc, #48]	; (8001c6c <vadc_group_0_Init+0xcc>)
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <vadc_group_0_Init+0xbc>)
 8001c3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c42:	f7ff ff8d 	bl	8001b60 <XMC_VADC_GROUP_QueueInsertChannel>
  
  
  
  /* Insert channels in to the background request sources*/
  index = (int)vadc_group_0_TOTAL_QUEUE_ENTIRES;
  while (index >= 0)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	daf3      	bge.n	8001c34 <vadc_group_0_Init+0x94>
  {
    XMC_VADC_GROUP_QueueInsertChannel(vadc_group_0_GROUP_PTR, vadc_group_0_queue_entries[index--]);
  }


  return(status);
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	1ffe8800 	.word	0x1ffe8800
 8001c5c:	40004400 	.word	0x40004400
 8001c60:	08002bb8 	.word	0x08002bb8
 8001c64:	08002ba0 	.word	0x08002ba0
 8001c68:	08002bac 	.word	0x08002bac
 8001c6c:	08002bb4 	.word	0x08002bb4

08001c70 <VADC_GLOBAL_CONFIG_Init>:
 * @return VADC_GLOBAL_CONFIG_STATUS_t: Status of the VADC driver initialization.\n
 *   @ref VADC_GLOBAL_CONFIG_STATUS_SUCCESS - on successful initialization.\n
 *   @ref VADC_GLOBAL_CONFIG_STATUS_FAILURE - if initialization fails.\n
 */
VADC_GLOBAL_CONFIG_STATUS_t VADC_GLOBAL_CONFIG_Init(const VADC_GLOBAL_CONFIG_t *const handle)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  VADC_GLOBAL_CONFIG_STATUS_t status;
  XMC_ASSERT("VADC_GLOBAL_CONFIG APP handle function pointer uninitialized", ((handle != NULL) &&
                                                                              (handle->init_function !=NULL)))

  status = VADC_GLOBAL_CONFIG_STATUS_SUCCESS;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]

  status = handle->init_function();
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4798      	blx	r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]

  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	3310      	adds	r3, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	408b      	lsls	r3, r1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <XMC_VADC_GLOBAL_BackgroundSetGatingMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GLOBAL_BackgroundSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
                                                            XMC_VADC_GATEMODE_t mode_sel)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  /* Configure the new gating mode*/
  global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop

08001cf4 <VADC_GLOBAL_CONFIG_0_Init>:
/***********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/* Channel initialization function */
VADC_GLOBAL_CONFIG_STATUS_t VADC_GLOBAL_CONFIG_0_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (VADC_GLOBAL_CONFIG_0.init_state == VADC_GLOBAL_CONFIG_STATUS_UNINITIALIZED)
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001cfc:	7d1b      	ldrb	r3, [r3, #20]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d148      	bne.n	8001d94 <VADC_GLOBAL_CONFIG_0_Init+0xa0>
  {
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(VADC_GLOBAL_CONFIG_0_MODULE_PTR, &global_config);
 8001d02:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8001d06:	4927      	ldr	r1, [pc, #156]	; (8001da4 <VADC_GLOBAL_CONFIG_0_Init+0xb0>)
 8001d08:	f7ff fc54 	bl	80015b4 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for (group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	e02c      	b.n	8001d6c <VADC_GLOBAL_CONFIG_0_Init+0x78>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(VADC_GLOBAL_CONFIG_0.group_ptrs_array[group_index]->group_handle,
 8001d12:	4a23      	ldr	r2, [pc, #140]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	6819      	ldr	r1, [r3, #0]
                          VADC_GLOBAL_CONFIG_0.group_ptrs_array[group_index]->group_config_handle);
 8001d1e:	4a20      	ldr	r2, [pc, #128]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	685b      	ldr	r3, [r3, #4]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for (group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(VADC_GLOBAL_CONFIG_0.group_ptrs_array[group_index]->group_handle,
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7ff fc9b 	bl	8001668 <XMC_VADC_GROUP_Init>
                          VADC_GLOBAL_CONFIG_0.group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(VADC_GLOBAL_CONFIG_0.group_ptrs_array[group_index]->group_handle,
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	2103      	movs	r1, #3
 8001d42:	f7ff fd21 	bl	8001788 <XMC_VADC_GROUP_SetPowerMode>
                                  (XMC_VADC_GROUP_POWERMODE_t) XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if (VADC_GLOBAL_CONFIG_0.group_ptrs_array[group_index]->post_calibration == (bool)false)
 8001d46:	4a16      	ldr	r2, [pc, #88]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	7a1b      	ldrb	r3, [r3, #8]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <VADC_GLOBAL_CONFIG_0_Init+0x72>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(VADC_GLOBAL_CONFIG_0_MODULE_PTR,group_index);
 8001d5c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	f7ff ff95 	bl	8001c90 <XMC_VADC_GLOBAL_DisablePostCalibration>
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(VADC_GLOBAL_CONFIG_0_MODULE_PTR, &global_config);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for (group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d9cf      	bls.n	8001d12 <VADC_GLOBAL_CONFIG_0_Init+0x1e>
      }
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */


    XMC_VADC_GLOBAL_StartupCalibration(VADC_GLOBAL_CONFIG_0_MODULE_PTR);
 8001d72:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8001d76:	f7ff fc47 	bl	8001608 <XMC_VADC_GLOBAL_StartupCalibration>
    XMC_VADC_GLOBAL_BackgroundInit(VADC_GLOBAL_CONFIG_0_MODULE_PTR, &VADC_GLOBAL_CONFIG_0_background_scan_config);
 8001d7a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8001d7e:	490a      	ldr	r1, [pc, #40]	; (8001da8 <VADC_GLOBAL_CONFIG_0_Init+0xb4>)
 8001d80:	f7ff fd1e 	bl	80017c0 <XMC_VADC_GLOBAL_BackgroundInit>
    XMC_VADC_GLOBAL_BackgroundSetGatingMode(VADC_GLOBAL_CONFIG_0_MODULE_PTR, 
 8001d84:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
 8001d88:	2101      	movs	r1, #1
 8001d8a:	f7ff ff97 	bl	8001cbc <XMC_VADC_GLOBAL_BackgroundSetGatingMode>
                                            (XMC_VADC_GATEMODE_t) XMC_VADC_GATEMODE_IGNORE);
    VADC_GLOBAL_CONFIG_0.init_state = (VADC_GLOBAL_CONFIG_STATUS_t) VADC_GLOBAL_CONFIG_STATUS_SUCCESS;
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	751a      	strb	r2, [r3, #20]
  }
  return (VADC_GLOBAL_CONFIG_0.init_state);
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <VADC_GLOBAL_CONFIG_0_Init+0xac>)
 8001d96:	7d1b      	ldrb	r3, [r3, #20]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	1ffe8800 	.word	0x1ffe8800
 8001da4:	08002c20 	.word	0x08002c20
 8001da8:	08002c68 	.word	0x08002c68

08001dac <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1 << slice_number);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	60da      	str	r2, [r3, #12]
}
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR> 
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	045b      	lsls	r3, r3, #17
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	615a      	str	r2, [r3, #20]
}
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	60da      	str	r2, [r3, #12]
}
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <XMC_CCU8_SLICE_GetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetTimerPeriodMatch().
 */
__STATIC_INLINE uint16_t XMC_CCU8_SLICE_GetTimerPeriodMatch(const XMC_CCU8_SLICE_t *const slice)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return((uint16_t) slice->PR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	b29b      	uxth	r3, r3
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop

08001e2c <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	611a      	str	r2, [r3, #16]
}
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR> 
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series 
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e86:	f023 020c 	bic.w	r2, r3, #12
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	f003 0306 	and.w	r3, r3, #6
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
                                                          const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & ~(uint32_t)((uint32_t)CCU8_CC8_STC_STM_Msk << (uint32_t)CCU8_CC8_STC_STM_Pos)) |
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	75fb      	strb	r3, [r7, #23]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75bb      	strb	r3, [r7, #22]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7f1b      	ldrb	r3, [r3, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f040 80a4 	bne.w	8002006 <PWM_CCU8_Init+0x162>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fbf8 	bl	80026bc <GLOBAL_CCU8_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	75bb      	strb	r3, [r7, #22]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
 8001ed0:	7dbb      	ldrb	r3, [r7, #22]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8093 	bne.w	8001ffe <PWM_CCU8_Init+0x15a>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe ff83 	bl	8000df0 <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7ff fa12 	bl	8001320 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	4610      	mov	r0, r2
 8001f08:	2100      	movs	r1, #0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff fa16 	bl	800133c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
 8001f18:	88db      	ldrh	r3, [r3, #6]
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f7ff fa0c 	bl	800133c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2a:	78db      	ldrb	r3, [r3, #3]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <PWM_CCU8_Init+0xa4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	78db      	ldrb	r3, [r3, #3]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <PWM_CCU8_Init+0xb6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe ff85 	bl	8000e64 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7ff ff83 	bl	8001e74 <XMC_CCU8_SLICE_SetShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7ff ff57 	bl	8001e2c <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7ff ff4f 	bl	8001e2c <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7ff fa42 	bl	8001424 <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f959 	bl	8002258 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f834 	bl	8002014 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f8f5 	bl	800219c <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
 8001fc6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd6:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	75fb      	strb	r3, [r7, #23]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <PWM_CCU8_Init+0x166>
      {
        status = PWM_CCU8_Start(handle_ptr);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 fa20 	bl	8002438 <PWM_CCU8_Start>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	75fb      	strb	r3, [r7, #23]
 8001ffc:	e005      	b.n	800200a <PWM_CCU8_Init+0x166>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	771a      	strb	r2, [r3, #28]
 8002004:	e001      	b.n	800200a <PWM_CCU8_Init+0x166>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
 8002006:	2302      	movs	r3, #2
 8002008:	75fb      	strb	r3, [r7, #23]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
 800200a:	7dfb      	ldrb	r3, [r7, #23]
} /* end of PWM_CCU8_Init() api */
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 8002024:	7c5b      	ldrb	r3, [r3, #17]
 8002026:	4610      	mov	r0, r2
 8002028:	2100      	movs	r1, #0
 800202a:	461a      	mov	r2, r3
 800202c:	f7ff f99e 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
 8002038:	7c9b      	ldrb	r3, [r3, #18]
 800203a:	4610      	mov	r0, r2
 800203c:	2102      	movs	r1, #2
 800203e:	461a      	mov	r2, r3
 8002040:	f7ff f994 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
 800204c:	7cdb      	ldrb	r3, [r3, #19]
 800204e:	4610      	mov	r0, r2
 8002050:	2103      	movs	r1, #3
 8002052:	461a      	mov	r2, r3
 8002054:	f7ff f98a 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
 8002060:	7d1b      	ldrb	r3, [r3, #20]
 8002062:	4610      	mov	r0, r2
 8002064:	2104      	movs	r1, #4
 8002066:	461a      	mov	r2, r3
 8002068:	f7ff f980 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
 8002074:	7d5b      	ldrb	r3, [r3, #21]
 8002076:	4610      	mov	r0, r2
 8002078:	2105      	movs	r1, #5
 800207a:	461a      	mov	r2, r3
 800207c:	f7ff f976 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
 8002088:	7d9b      	ldrb	r3, [r3, #22]
 800208a:	4610      	mov	r0, r2
 800208c:	2101      	movs	r1, #1
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff f96c 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
 800209c:	7ddb      	ldrb	r3, [r3, #23]
 800209e:	4610      	mov	r0, r2
 80020a0:	2108      	movs	r1, #8
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7ff f962 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
 80020b0:	7e1b      	ldrb	r3, [r3, #24]
 80020b2:	4610      	mov	r0, r2
 80020b4:	2109      	movs	r1, #9
 80020b6:	461a      	mov	r2, r3
 80020b8:	f7ff f958 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
 80020c4:	7e5b      	ldrb	r3, [r3, #25]
 80020c6:	4610      	mov	r0, r2
 80020c8:	210a      	movs	r1, #10
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7ff f94e 	bl	800136c <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	7a1b      	ldrb	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	2100      	movs	r1, #0
 80020e2:	f7ff feb1 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	7a5b      	ldrb	r3, [r3, #9]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4618      	mov	r0, r3
 80020f6:	2102      	movs	r1, #2
 80020f8:	f7ff fea6 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	7a9b      	ldrb	r3, [r3, #10]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4618      	mov	r0, r3
 800210c:	2103      	movs	r1, #3
 800210e:	f7ff fe9b 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	7adb      	ldrb	r3, [r3, #11]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4618      	mov	r0, r3
 8002122:	2104      	movs	r1, #4
 8002124:	f7ff fe90 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	7b1b      	ldrb	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4618      	mov	r0, r3
 8002138:	2105      	movs	r1, #5
 800213a:	f7ff fe85 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	7b5b      	ldrb	r3, [r3, #13]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	2101      	movs	r1, #1
 8002150:	f7ff fe7a 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	7b9b      	ldrb	r3, [r3, #14]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	4618      	mov	r0, r3
 8002164:	2108      	movs	r1, #8
 8002166:	f7ff fe6f 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	7bdb      	ldrb	r3, [r3, #15]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	4618      	mov	r0, r3
 800217a:	2109      	movs	r1, #9
 800217c:	f7ff fe64 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	7c1b      	ldrb	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	4618      	mov	r0, r3
 8002190:	210a      	movs	r1, #10
 8002192:	f7ff fe59 	bl	8001e48 <XMC_CCU8_SLICE_EnableEvent>
  }
}
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00e      	beq.n	80021ce <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7fe f8e1 	bl	8000390 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00e      	beq.n	80021f8 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
 80021ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ee:	4608      	mov	r0, r1
 80021f0:	4611      	mov	r1, r2
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7fe f8cc 	bl	8000390 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00e      	beq.n	8002222 <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
 8002216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	f7fe f8b7 	bl	8000390 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800222a:	2b00      	cmp	r3, #0
 800222c:	d010      	beq.n	8002250 <PWM_CCU8_lInit_GPIO+0xb4>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4608      	mov	r0, r1
 8002248:	4611      	mov	r1, r2
 800224a:	461a      	mov	r2, r3
 800224c:	f7fe f8a0 	bl	8000390 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4610      	mov	r0, r2
 800226c:	2101      	movs	r1, #1
 800226e:	461a      	mov	r2, r3
 8002270:	f7fe ffec 	bl	800124c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4610      	mov	r0, r2
 8002280:	2102      	movs	r1, #2
 8002282:	461a      	mov	r2, r3
 8002284:	f7fe ffe2 	bl	800124c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	4610      	mov	r0, r2
 8002294:	2103      	movs	r1, #3
 8002296:	461a      	mov	r2, r3
 8002298:	f7fe ffd8 	bl	800124c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <PWM_CCU8_lConfigure_Events+0x6e>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                               handle_ptr->config_ptr->ext_start_mode);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
 80022b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7fe fdeb 	bl	8000e9c <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00e      	beq.n	80022f0 <PWM_CCU8_lConfigure_Events+0x98>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6899      	ldr	r1, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
                              handle_ptr->config_ptr->ext_stop_mode);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
 80022e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80022e6:	4608      	mov	r0, r1
 80022e8:	4611      	mov	r1, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	f7fe fe04 	bl	8000ef8 <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d009      	beq.n	8002310 <PWM_CCU8_lConfigure_Events+0xb8>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fed0 	bl	80010b0 <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <PWM_CCU8_lConfigure_Events+0xd8>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f7fe fea6 	bl	800107c <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <PWM_CCU8_lConfigure_Events+0xf8>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f7fe fe7c 	bl	8001048 <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <PWM_CCU8_lConfigure_Events+0x12c>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002368:	4610      	mov	r0, r2
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fdf0 	bl	8000f50 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800237c:	4610      	mov	r0, r2
 800237e:	4619      	mov	r1, r3
 8002380:	f7fe fe00 	bl	8000f84 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800238c:	2b00      	cmp	r3, #0
 800238e:	d011      	beq.n	80023b4 <PWM_CCU8_lConfigure_Events+0x15c>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6898      	ldr	r0, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80023a0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
 80023a8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	f7fe fe02 	bl	8000fb8 <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d11a      	bne.n	80023f6 <PWM_CCU8_lConfigure_Events+0x19e>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
                              handle_ptr->config_ptr->ext_trap_sync);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
 80023d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	461a      	mov	r2, r3
 80023da:	f7fe fe9b 	bl	8001114 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <PWM_CCU8_lConfigure_Events+0x19e>
    {
      XMC_CCU8_SLICE_EnableTrap(
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4618      	mov	r0, r3
 80023f0:	210f      	movs	r1, #15
 80023f2:	f7ff fcef 	bl	8001dd4 <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d105      	bne.n	800240e <PWM_CCU8_lConfigure_Events+0x1b6>
      != handle_ptr->config_ptr->ext_override_level_event))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
 800240a:	2b00      	cmp	r3, #0
 800240c:	d011      	beq.n	8002432 <PWM_CCU8_lConfigure_Events+0x1da>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 8002416:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	4608      	mov	r0, r1
 8002420:	4611      	mov	r1, r2
 8002422:	461a      	mov	r2, r3
 8002424:	f7fe feb0 	bl	8001188 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fe59 	bl	80010e4 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7f1b      	ldrb	r3, [r3, #28]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d003      	beq.n	8002454 <PWM_CCU8_Start+0x1c>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7f1b      	ldrb	r3, [r3, #28]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d117      	bne.n	8002484 <PWM_CCU8_Start+0x4c>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7b5b      	ldrb	r3, [r3, #13]
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f7ff fca4 	bl	8001dac <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <PWM_CCU8_Start+0x42>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fcbf 	bl	8001df8 <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2202      	movs	r2, #2
 800247e:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
 8002484:	7bfb      	ldrb	r3, [r7, #15]
} /* end of PWM_CCU8_Start() api */
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop

08002490 <PWM_CCU8_SetDutyCycleSymmetric>:
/**********************************************************************************************************/

/*Sets the duty cycle (uint32_t) for CCU8_CC8 slice. */
PWM_CCU8_STATUS_t PWM_CCU8_SetDutyCycleSymmetric(PWM_CCU8_t* handle_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
                                                 uint32_t duty_cycle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	460b      	mov	r3, r1
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	72fb      	strb	r3, [r7, #11]
  PWM_CCU8_STATUS_t status;
  uint32_t period;
  uint32_t compare;

  status = PWM_CCU8_STATUS_FAILURE;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
  XMC_ASSERT("PWM_CCU8_SetDutyCycleSymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	7f1b      	ldrb	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d036      	beq.n	8002518 <PWM_CCU8_SetDutyCycleSymmetric+0x88>
  {
    /* duty cycle has to be in between 0 and 100 */
    if ((duty_cycle > PWM_CCU8_SYM_DUTY_MAX))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d831      	bhi.n	8002518 <PWM_CCU8_SetDutyCycleSymmetric+0x88>
    {
      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:Cannot set duty cycle > 100%");
    }
    else
    {
      period = (uint32_t) XMC_CCU8_SLICE_GetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr) + 1U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fca9 	bl	8001e10 <XMC_CCU8_SLICE_GetTimerPeriodMatch>
 80024be:	4603      	mov	r3, r0
 80024c0:	3301      	adds	r3, #1
 80024c2:	61bb      	str	r3, [r7, #24]

      /* Duty Cycle(symmetric) = ((PR + 1)- CR) / (PR + 1) */
      compare = ((period * (PWM_CCU8_DUTY_FULL_SCALE - duty_cycle)) / PWM_CCU8_DUTY_FULL_SCALE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 80024ca:	3310      	adds	r3, #16
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	4a14      	ldr	r2, [pc, #80]	; (8002524 <PWM_CCU8_SetDutyCycleSymmetric+0x94>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	0b5b      	lsrs	r3, r3, #13
 80024da:	617b      	str	r3, [r7, #20]

      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, channel, (uint16_t) compare);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6899      	ldr	r1, [r3, #8]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	7afa      	ldrb	r2, [r7, #11]
 80024e6:	4608      	mov	r0, r1
 80024e8:	4611      	mov	r1, r2
 80024ea:	461a      	mov	r2, r3
 80024ec:	f7fe ff26 	bl	800133c <XMC_CCU8_SLICE_SetTimerCompareMatch>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7ff fc96 	bl	8001e2c <XMC_CCU8_EnableShadowTransfer>

      if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8002500:	7afb      	ldrb	r3, [r7, #11]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <PWM_CCU8_SetDutyCycleSymmetric+0x7e>
      {
        handle_ptr->sym_duty1 = duty_cycle;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
 800250c:	e002      	b.n	8002514 <PWM_CCU8_SetDutyCycleSymmetric+0x84>
      }
      else
      {
        handle_ptr->sym_duty2 = duty_cycle;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28
      }

      XMC_DEBUG("PWM_CCU8_SetDutyCycleSymmetric:dutycycle set");
      status = PWM_CCU8_STATUS_SUCCESS;
 8002514:	2300      	movs	r3, #0
 8002516:	77fb      	strb	r3, [r7, #31]
    }
  }
  return (status);
 8002518:	7ffb      	ldrb	r3, [r7, #31]
} /* end of PWM_CCU8_SetDutyCycleSymmetric() api */
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	d1b71759 	.word	0xd1b71759

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002534:	0a1b      	lsrs	r3, r3, #8
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_EnableIRQ+0x34>)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	f002 021f 	and.w	r2, r2, #31
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	490d      	ldr	r1, [pc, #52]	; (80025c8 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	4909      	ldr	r1, [pc, #36]	; (80025cc <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	0092      	lsls	r2, r2, #2
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
  }
}
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f1c3 0307 	rsb	r3, r3, #7
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	bf28      	it	cs
 80025ee:	2306      	movcs	r3, #6
 80025f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3306      	adds	r3, #6
 80025f6:	2b06      	cmp	r3, #6
 80025f8:	d902      	bls.n	8002600 <NVIC_EncodePriority+0x30>
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	e000      	b.n	8002602 <NVIC_EncodePriority+0x32>
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	2201      	movs	r2, #1
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	1e5a      	subs	r2, r3, #1
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	401a      	ands	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	1e59      	subs	r1, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002624:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop

08002634 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff7e 	bl	8002544 <__NVIC_EnableIRQ>
}
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop

08002650 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	781c      	ldrb	r4, [r3, #0]
 800265c:	f7ff ff64 	bl	8002528 <__NVIC_GetPriorityGrouping>
 8002660:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8002666:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800266c:	4608      	mov	r0, r1
 800266e:	4611      	mov	r1, r2
 8002670:	461a      	mov	r2, r3
 8002672:	f7ff ffad 	bl	80025d0 <NVIC_EncodePriority>
 8002676:	4602      	mov	r2, r0
 8002678:	b263      	sxtb	r3, r4
 800267a:	4618      	mov	r0, r3
 800267c:	4611      	mov	r1, r2
 800267e:	f7ff ff7d 	bl	800257c <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	78db      	ldrb	r3, [r3, #3]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffd2 	bl	8002634 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	bf00      	nop

0800269c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR> 
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7b5b      	ldrb	r3, [r3, #13]
 80026c8:	f083 0301 	eor.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00f      	beq.n	80026f2 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7b1b      	ldrb	r3, [r3, #12]
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe fb69 	bl	8000db4 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ffd8 	bl	800269c <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7c1a      	ldrb	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3304      	adds	r3, #4
 8002710:	4608      	mov	r0, r1
 8002712:	4611      	mov	r1, r2
 8002714:	461a      	mov	r2, r3
 8002716:	f7fd fe3b 	bl	8000390 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6819      	ldr	r1, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7c1a      	ldrb	r2, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7c5b      	ldrb	r3, [r3, #17]
 8002726:	4608      	mov	r0, r1
 8002728:	4611      	mov	r1, r2
 800272a:	461a      	mov	r2, r3
 800272c:	f7fe fe90 	bl	8001450 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop

0800273c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800276c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800276e:	4a04      	ldr	r2, [pc, #16]	; (8002780 <__NVIC_SetPriorityGrouping+0x44>)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	60d3      	str	r3, [r2, #12]
}
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800278a:	2001      	movs	r0, #1
 800278c:	f7ff ffd6 	bl	800273c <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002790:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <SystemCoreSetup+0x94>)
 8002794:	4a21      	ldr	r2, [pc, #132]	; (800281c <SystemCoreSetup+0x98>)
 8002796:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002798:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800279c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800279e:	4a1e      	ldr	r2, [pc, #120]	; (8002818 <SystemCoreSetup+0x94>)
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <SystemCoreSetup+0x94>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <SystemCoreSetup+0x9c>)
 80027b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b4:	3314      	adds	r3, #20
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f023 030f 	bic.w	r3, r3, #15
 80027c0:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <SystemCoreSetup+0x9c>)
 80027cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d0:	3314      	adds	r3, #20
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <SystemCoreSetup+0x94>)
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <SystemCoreSetup+0x94>)
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f023 0310 	bic.w	r3, r3, #16
 80027e0:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80027e2:	4a0d      	ldr	r2, [pc, #52]	; (8002818 <SystemCoreSetup+0x94>)
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <SystemCoreSetup+0x94>)
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f023 0308 	bic.w	r3, r3, #8
 80027ec:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SystemCoreSetup+0x94>)
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <SystemCoreSetup+0x94>)
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80027fa:	4a07      	ldr	r2, [pc, #28]	; (8002818 <SystemCoreSetup+0x94>)
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <SystemCoreSetup+0x94>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002804:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002806:	4a04      	ldr	r2, [pc, #16]	; (8002818 <SystemCoreSetup+0x94>)
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <SystemCoreSetup+0x94>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002810:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	e000ed00 	.word	0xe000ed00
 800281c:	08000000 	.word	0x08000000
 8002820:	58001000 	.word	0x58001000

08002824 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]

  return (status);
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <OSCHP_GetFrequency+0x10>)
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	00b71b00 	.word	0x00b71b00

08002858 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <SystemCoreClockSetup+0x50>)
 8002860:	1d3c      	adds	r4, r7, #4
 8002862:	461d      	mov	r5, r3
 8002864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002868:	682b      	ldr	r3, [r5, #0]
 800286a:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 800286c:	1d3b      	adds	r3, r7, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f7fd fe5c 	bl	800052c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fd ff47 	bl	8000708 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fd fefc 	bl	8000678 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8002880:	2004      	movs	r0, #4
 8002882:	f7fd ffcd 	bl	8000820 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002886:	2001      	movs	r0, #1
 8002888:	2120      	movs	r1, #32
 800288a:	f7fe f831 	bl	80008f0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800288e:	2000      	movs	r0, #0
 8002890:	f7fd ff06 	bl	80006a0 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002894:	2001      	movs	r0, #1
 8002896:	f7fd ffeb 	bl	8000870 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800289a:	2001      	movs	r0, #1
 800289c:	f7fd ffd4 	bl	8000848 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bdb0      	pop	{r4, r5, r7, pc}
 80028a6:	bf00      	nop
 80028a8:	08002d84 	.word	0x08002d84

080028ac <ANALOG_IO_Init>:
 * Input Parameter  : Handler Pointer pointing to APP data structure.
 * Output Parameter : ANALOG_IO_STATUS_t (ANALOG_IO APP initialization status).
 */

ANALOG_IO_STATUS_t ANALOG_IO_Init(const ANALOG_IO_t *const handle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("ANALOG_IO_Init: Passed handler is a null pointer", handler != NULL);
  if (*(handle->state) == ANALOG_IO_STATE_NOT_INITIALIZED)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10a      	bne.n	80028d4 <ANALOG_IO_Init+0x28>
  {
    if (handle->config_ptr != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <ANALOG_IO_Init+0x20>
    {
      /* Instance specific initialization function call*/
      handle->config_ptr();
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4798      	blx	r3
    }
    /* Set the state variable to initialized state*/
    *(handle->state) = ANALOG_IO_STATE_INITIALIZED;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
  }
  return (ANALOG_IO_STATUS_OK);
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop

080028e0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80028e6:	2300      	movs	r3, #0
 80028e8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80028ea:	4821      	ldr	r0, [pc, #132]	; (8002970 <DAVE_Init+0x90>)
 80028ec:	f7ff ff9a 	bl	8002824 <CLOCK_XMC4_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <DAVE_Init+0x24>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
 80028fa:	481e      	ldr	r0, [pc, #120]	; (8002974 <DAVE_Init+0x94>)
 80028fc:	f7ff fad2 	bl	8001ea4 <PWM_CCU8_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance in_trap */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&in_trap); 
 800290a:	481b      	ldr	r0, [pc, #108]	; (8002978 <DAVE_Init+0x98>)
 800290c:	f7ff fef6 	bl	80026fc <DIGITAL_IO_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d104      	bne.n	8002924 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance button1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&button1); 
 800291a:	4818      	ldr	r0, [pc, #96]	; (800297c <DAVE_Init+0x9c>)
 800291c:	f7ff feee 	bl	80026fc <DIGITAL_IO_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d104      	bne.n	8002934 <DAVE_Init+0x54>
  {
	 /**  Initialization of VADC_GROUP_CONFIG APP instance vadc_group_0 */
	 init_status = (DAVE_STATUS_t)VADC_GROUP_CONFIG_Init(&vadc_group_0); 
 800292a:	4815      	ldr	r0, [pc, #84]	; (8002980 <DAVE_Init+0xa0>)
 800292c:	f7ff f8ec 	bl	8001b08 <VADC_GROUP_CONFIG_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <DAVE_Init+0x64>
  {
	 /**  Initialization of INTERRUPT APP instance controlLoop */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&controlLoop); 
 800293a:	4812      	ldr	r0, [pc, #72]	; (8002984 <DAVE_Init+0xa4>)
 800293c:	f7ff fe88 	bl	8002650 <INTERRUPT_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <DAVE_Init+0x74>
  {
	 /**  Initialization of ANALOG_IO APP instance ANALOG_P14_0 */
	 init_status = (DAVE_STATUS_t)ANALOG_IO_Init(&ANALOG_P14_0); 
 800294a:	480f      	ldr	r0, [pc, #60]	; (8002988 <DAVE_Init+0xa8>)
 800294c:	f7ff ffae 	bl	80028ac <ANALOG_IO_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance test_point_p3_12 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&test_point_p3_12); 
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <DAVE_Init+0xac>)
 800295c:	f7ff fece 	bl	80026fc <DIGITAL_IO_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002964:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	1ffe8860 	.word	0x1ffe8860
 8002974:	1ffe8818 	.word	0x1ffe8818
 8002978:	08002d48 	.word	0x08002d48
 800297c:	08002d5c 	.word	0x08002d5c
 8002980:	08002bc4 	.word	0x08002bc4
 8002984:	08002d44 	.word	0x08002d44
 8002988:	08002d98 	.word	0x08002d98
 800298c:	08002d70 	.word	0x08002d70

08002990 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	2201      	movs	r2, #1
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	605a      	str	r2, [r3, #4]
}
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c2:	409a      	lsls	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]
}
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop

080029d4 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80029e6:	409a      	lsls	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	605a      	str	r2, [r3, #4]
}
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a08:	78fb      	ldrb	r3, [r7, #3]
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	f003 0301 	and.w	r3, r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop

08002a20 <main>:
 * code.
 */
volatile float g_duty = 50.0f;

int main(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
    DAVE_STATUS_t status;

    status = DAVE_Init(); /* Initialization of DAVE APPs  */
 8002a26:	f7ff ff5b 	bl	80028e0 <DAVE_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]

    if(status != DAVE_STATUS_SUCCESS)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d000      	beq.n	8002a36 <main+0x16>
        XMC_DEBUG("DAVE APPs initialization failed\n");

        while(1U)
        {

        }
 8002a34:	e7fe      	b.n	8002a34 <main+0x14>
    }

    /* Placeholder for user application code. The while loop below can be replaced with user application code. */
    while(1U)
    {
        if(g_duty > 100.0f)
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <main+0xc0>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002ae4 <main+0xc4>
 8002a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	dd03      	ble.n	8002a52 <main+0x32>
        {
            g_duty = 100.0f;
 8002a4a:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <main+0xc0>)
 8002a4c:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <main+0xc8>)
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e00b      	b.n	8002a6a <main+0x4a>
        }
        else if(g_duty < 0.0f)
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <main+0xc0>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a60:	d503      	bpl.n	8002a6a <main+0x4a>
        {
            g_duty = 0.0f;
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <main+0xc0>)
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
        }
        /* Half bridge */
        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                       ((uint32_t)(g_duty / 2.0f) * PWM_CCU8_DUTY_SCALE));
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <main+0xc0>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	eeb0 7a00 	vmov.f32	s14, #0
 8002a74:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a7c:	ee17 2a90 	vmov	r2, s15
        else if(g_duty < 0.0f)
        {
            g_duty = 0.0f;
        }
        /* Half bridge */
        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
 8002a80:	2364      	movs	r3, #100	; 0x64
 8002a82:	fb03 f302 	mul.w	r3, r3, r2
 8002a86:	4819      	ldr	r0, [pc, #100]	; (8002aec <main+0xcc>)
 8002a88:	2100      	movs	r1, #0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	f7ff fd00 	bl	8002490 <PWM_CCU8_SetDutyCycleSymmetric>
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                       ((uint32_t)(g_duty / 2.0f) * PWM_CCU8_DUTY_SCALE));

        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                       ((uint32_t)(100.0f -(g_duty/2.0f)) * PWM_CCU8_DUTY_SCALE));
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <main+0xc0>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eeb0 7a00 	vmov.f32	s14, #0
 8002a9a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8002a9e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ae4 <main+0xc4>
 8002aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	ee17 2a90 	vmov	r2, s15
        /* Half bridge */
        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                       ((uint32_t)(g_duty / 2.0f) * PWM_CCU8_DUTY_SCALE));

        PWM_CCU8_SetDutyCycleSymmetric(&PWM_CCU8_0,
 8002aae:	2364      	movs	r3, #100	; 0x64
 8002ab0:	fb03 f302 	mul.w	r3, r3, r2
 8002ab4:	480d      	ldr	r0, [pc, #52]	; (8002aec <main+0xcc>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f7ff fce9 	bl	8002490 <PWM_CCU8_SetDutyCycleSymmetric>
                                       XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                       ((uint32_t)(100.0f -(g_duty/2.0f)) * PWM_CCU8_DUTY_SCALE));

       if(READ_BUTTON1)
 8002abe:	480c      	ldr	r0, [pc, #48]	; (8002af0 <main+0xd0>)
 8002ac0:	210d      	movs	r1, #13
 8002ac2:	f7ff ff99 	bl	80029f8 <XMC_GPIO_GetInput>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <main+0xb6>
       {
           XMC_GPIO_SetOutputHigh(TRIP);
 8002acc:	4809      	ldr	r0, [pc, #36]	; (8002af4 <main+0xd4>)
 8002ace:	2107      	movs	r1, #7
 8002ad0:	f7ff ff5e 	bl	8002990 <XMC_GPIO_SetOutputHigh>
 8002ad4:	e003      	b.n	8002ade <main+0xbe>
       }
       else
       {
           XMC_GPIO_SetOutputLow(TRIP);
 8002ad6:	4807      	ldr	r0, [pc, #28]	; (8002af4 <main+0xd4>)
 8002ad8:	2107      	movs	r1, #7
 8002ada:	f7ff ff69 	bl	80029b0 <XMC_GPIO_SetOutputLow>
       }
    }
 8002ade:	e7aa      	b.n	8002a36 <main+0x16>
 8002ae0:	1ffe885c 	.word	0x1ffe885c
 8002ae4:	42c80000 	.word	0x42c80000
 8002ae8:	42c80000 	.word	0x42c80000
 8002aec:	1ffe8818 	.word	0x1ffe8818
 8002af0:	48028f00 	.word	0x48028f00
 8002af4:	48028000 	.word	0x48028000

08002af8 <VADC0_G0_1_IRQHandler>:

/* ISR */
volatile uint32_t cntControlLoopIsr;
volatile uint16_t idc;
void ControlLoopIsr(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
    cntControlLoopIsr++;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <VADC0_G0_1_IRQHandler+0x2c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <VADC0_G0_1_IRQHandler+0x2c>)
 8002b04:	6013      	str	r3, [r2, #0]
    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT3, 12);
 8002b06:	4808      	ldr	r0, [pc, #32]	; (8002b28 <VADC0_G0_1_IRQHandler+0x30>)
 8002b08:	210c      	movs	r1, #12
 8002b0a:	f7ff ff63 	bl	80029d4 <XMC_GPIO_ToggleOutput>
    idc = ((uint16_t)vadc_group_0.group_ptr->RES[0]) >> 1U;
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <VADC0_G0_1_IRQHandler+0x34>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <VADC0_G0_1_IRQHandler+0x38>)
 8002b1e:	801a      	strh	r2, [r3, #0]
}
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	1ffe886c 	.word	0x1ffe886c
 8002b28:	48028300 	.word	0x48028300
 8002b2c:	08002bc4 	.word	0x08002bc4
 8002b30:	1ffe8868 	.word	0x1ffe8868

08002b34 <__libc_init_array>:
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <__libc_init_array+0x3c>)
 8002b38:	4c0e      	ldr	r4, [pc, #56]	; (8002b74 <__libc_init_array+0x40>)
 8002b3a:	1ae4      	subs	r4, r4, r3
 8002b3c:	10a4      	asrs	r4, r4, #2
 8002b3e:	2500      	movs	r5, #0
 8002b40:	461e      	mov	r6, r3
 8002b42:	42a5      	cmp	r5, r4
 8002b44:	d004      	beq.n	8002b50 <__libc_init_array+0x1c>
 8002b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b4a:	4798      	blx	r3
 8002b4c:	3501      	adds	r5, #1
 8002b4e:	e7f8      	b.n	8002b42 <__libc_init_array+0xe>
 8002b50:	f7fe ffd4 	bl	8001afc <_init>
 8002b54:	4c08      	ldr	r4, [pc, #32]	; (8002b78 <__libc_init_array+0x44>)
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <__libc_init_array+0x48>)
 8002b58:	1ae4      	subs	r4, r4, r3
 8002b5a:	10a4      	asrs	r4, r4, #2
 8002b5c:	2500      	movs	r5, #0
 8002b5e:	461e      	mov	r6, r3
 8002b60:	42a5      	cmp	r5, r4
 8002b62:	d004      	beq.n	8002b6e <__libc_init_array+0x3a>
 8002b64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b68:	4798      	blx	r3
 8002b6a:	3501      	adds	r5, #1
 8002b6c:	e7f8      	b.n	8002b60 <__libc_init_array+0x2c>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	1ffe8860 	.word	0x1ffe8860
 8002b74:	1ffe8860 	.word	0x1ffe8860
 8002b78:	1ffe8860 	.word	0x1ffe8860
 8002b7c:	1ffe8860 	.word	0x1ffe8860

08002b80 <g_xmc_vadc_group_array>:
 8002b80:	40004400 40004800 40004c00 40005000     .D.@.H.@.L.@.P.@

08002b90 <vadc_group_0_channel_0_ch_config>:
 8002b90:	00200000 00000000 00000000 0000ff01     .. .............

08002ba0 <vadc_group_0_channel_config>:
 8002ba0:	08002b90 00000000                       .+......

08002ba8 <vadc_group_0_result0_config>:
 8002ba8:	81000000                                ....

08002bac <vadc_group_0_result_config>:
 8002bac:	08002ba8 00000000                       .+......

08002bb4 <vadc_group_0_queue_entries>:
 8002bb4:	000000a0                                ....

08002bb8 <vadc_group_0_queue_config>:
 8002bb8:	00000000 00004800 00000004              .....H......

08002bc4 <vadc_group_0>:
 8002bc4:	08001ba1 40004400 40004000              .....D.@.@.@

08002bd0 <group0_init_config>:
	...

08002be4 <group1_init_config>:
	...

08002bf8 <group2_init_config>:
	...

08002c0c <group3_init_config>:
	...

08002c20 <global_config>:
 8002c20:	00000000 00000001 00000000 00000000     ................
	...

08002c38 <group0_config>:
 8002c38:	40004400 08002bd0 00000001              .D.@.+......

08002c44 <group1_config>:
 8002c44:	40004800 08002be4 00000001              .H.@.+......

08002c50 <group2_config>:
 8002c50:	40004c00 08002bf8 00000001              .L.@.+......

08002c5c <group3_config>:
 8002c5c:	40005000 08002c0c 00000001              .P.@.,......

08002c68 <VADC_GLOBAL_CONFIG_0_background_scan_config>:
	...
 8002c70:	00000020                                 ...

08002c74 <PWM_CCU8_0_timer_handle>:
 8002c74:	00000001 00000000 0000001c 00000001     ................

08002c84 <PWM_CCU8_0_event0_config>:
 8002c84:	00010000                                ....

08002c88 <PWM_CCU8_0_event1_config>:
 8002c88:	00010000                                ....

08002c8c <PWM_CCU8_0_event2_config>:
 8002c8c:	03010000                                ....

08002c90 <PWM_CCU8_0_dt_config>:
 8002c90:	0000003f 00000024 00002400              ?...$....$..

08002c9c <PWM_CCU8_0_ch1_out0_config>:
 8002c9c:	00000098 00010000 00000004              ............

08002ca8 <PWM_CCU8_0_ch2_out2_config>:
 8002ca8:	00000098 00010000 00000004              ............

08002cb4 <PWM_CCU8_0_config_handle>:
 8002cb4:	0e0f0001 0e100e10 00000001 00000000     ................
 8002cc4:	00000200 00020000 00000000 08002c84     .............,..
 8002cd4:	08002c88 08002c8c 00000000 00000000     .,...,..........
 8002ce4:	00000000 03010000 00000001 04000000     ................
 8002cf4:	08002c90 00000001 08002c74 00000001     .,......t,......
 8002d04:	48028000 00000005 08002c9c 00000000     ...H.....,......
	...
 8002d20:	00000001 48028000 0000000a 08002ca8     .......H.....,..
	...
 8002d40:	1ffe884c                                L...

08002d44 <controlLoop>:
 8002d44:	01003f13                                .?..

08002d48 <in_trap>:
 8002d48:	48028000 00000080 00000001 00000000     ...H............
 8002d58:	00000007                                ....

08002d5c <button1>:
 8002d5c:	48028f00 00000000 00000000 00000000     ...H............
 8002d6c:	0000000d                                ....

08002d70 <test_point_p3_12>:
 8002d70:	48028300 00000080 00010000 00000000     ...H............
 8002d80:	0000000c 01010230 00010000 00000000     ....0...........
 8002d90:	00010000 01010102                       ........

08002d98 <ANALOG_P14_0>:
 8002d98:	00000000 1ffe8864 48028e00 00000000     ....d......H....
